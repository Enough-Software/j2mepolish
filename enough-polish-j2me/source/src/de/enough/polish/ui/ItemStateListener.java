//#condition polish.usePolishGui
// generated by de.enough.doc2java.Doc2Java (www.enough.de) on Sat Dec 06 15:06:44 CET 2003
/*
 * Copyright (c) 2004-2005 Robert Virkus / Enough Software
 *
 * This file is part of J2ME Polish.
 *
 * J2ME Polish is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * J2ME Polish is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with J2ME Polish; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 * Commercial licenses are also available, please
 * refer to the accompanying LICENSE.txt or visit
 * http://www.j2mepolish.org for details.
 */
package de.enough.polish.ui;

/**
 * This interface is used by applications which need to receive
 * events that indicate changes in the internal
 * state of the interactive items within a <A HREF="../../../javax/microedition/lcdui/Form.html"><CODE>Form</CODE></A>
 * screen.
 * <HR>
 * 
 * 
 * @since MIDP 1.0
 */
public interface ItemStateListener
{
	/**
	 * Called when internal state of an <code>Item</code> has been
	 * changed by the user.
	 * This happens when the user:
	 * <UL>
	 * <LI>changes the set of selected values in a
	 * <code>ChoiceGroup</code>;</LI>
	 * <LI>adjusts the value of an interactive <code>Gauge</code>;</LI>
	 * <LI>enters or modifies the value in a <code>TextField</code>;</LI>
	 * <LI>enters a new date or time in a <code>DateField</code>; and</LI>
	 * <LI><A HREF="../../../javax/microedition/lcdui/Item.html#notifyStateChanged()"><CODE>Item.notifyStateChanged()</CODE></A> was called on an
	 * <code>Item</code>.</LI>
	 * </UL>
	 * 
	 * <p> It is up to the device to decide when it considers a
	 * new value to have been entered into an <code>Item</code>.  For example,
	 * implementations of text editing within a <code>TextField</code>
	 * vary greatly
	 * from device to device. </P>
	 * 
	 * <p>In general, it is not expected that the listener will be called
	 * after every change is made. However, if an item's value
	 * has been changed, the listener
	 * will be called to notify the application of the change
	 * before it is called for a change on another item, and before a
	 * command is delivered to the <code>Form's</code>
	 * <code>CommandListener</code>. For implementations that have the
	 * concept of an input
	 * focus, the listener should be called no later than when the focus moves
	 * away from an item whose state has been changed.  The listener
	 * should be called only if the item's value has actually been
	 * changed.</P>
	 * 
	 * <p> The listener is not called if the application changes
	 * the value of an interactive item. </p>
	 * 
	 * @param item the item that was changed
	 */
	void itemStateChanged( Item item);

}
