package de.enough.polish.maps;

/**
 * This interface defines the functionality required to implement a map provider. This includes methods for generating {@link MapRequests} that are guaranteed to be valid when used with the provider,
 * using the generated {@link MapRequest} to generate a valid {@link MapResponse} and being able to resolve the {@link MapTile}s of the generated {@link MapResponse}. Additional methods include converting from geo-coordinates to world-pixels and vice-versa.
 * Although possible, inter-changing {@link MapRequest}s, {@link MapResponse}s and {@link MapTile}s between different provider implementations is not guaranteed to work. 
 * @author Ovidiu Iliescu
 */
public interface MapProvider {

	/**
	 * Generates a map request for the given parameters. {@link MapRequest}s generated by using this method are guaranteed to be valid with this provider's {@link MapProvider#prepareResponse(MapRequest)} method.
	 * @param lat the latitude of the map request center point
	 * @param lon the longitude of the map request center point
	 * @param width the width of the map request (in pixels)
	 * @param height the height of the map request (in pixels)
	 * @param zoom the desired zoom level
	 * @return a MapRequest object
	 */
	public MapRequest getRequestForCoords(double lat, double lon, int width, int height, int zoom);
	
	/**
	 * Prepares a MapResponse based on the given {@link MapRequest}. Only {@link MapRequest}s generated using the provider's {@link MapProvider#getRequestForCoords(double, double, int, int, int)} method are guaranteed to
	 * be valid with this method.
	 * @param request the source request
	 * @return the map response
	 */
	public MapResponse prepareResponse(MapRequest request);
	
	/**
	 * Resolves a given {@link MapTile}. This typically involves retrieving the server-side image corresponding to the tile. Only {@link MapTile}s that belong to a {@link MapResponse} generated by the provider are guaranteed to be valid and working with this method.
	 * @param tile the tile to resolve
	 * @throws Exception
	 */
	public void resolveTile(MapTile tile) throws Exception;
	
	/**
	 * Returns the provider's minimum zoom level
	 * @return the provider's minimum zoom level
	 */
	public int getMinZoomLevel();
	
	/**
	 * Returns the provider's maximum zoom level
	 * @return the provider's maximum zoom level
	 */
	public int getMaxZoomLevel();
	
	/**
	 * Returns the provider's recommended zoom level
	 * @return the provider's recommended zoom level
	 */
	public int getRecommendedZoomLevel();
	
	/**
	 * Calculates destination geo-coordinates based on a set of original geo-coordinates and X/Y offsets (in pixels).
	 * @param lat the original latitude
	 * @param lon the original longitude
	 * @param deltaY the Y offset (in pixels)
	 * @param deltaX the X offset (in pixels)
	 * @param zoom the zoom level
	 * @return the resulting {lat, lon} set of coordinates
	 */
	public double[] getCoordsByPixelOffset(double lat, double lon, int deltaY, int deltaX, int zoom);
	
	/**
	 * Converts a set of geo-coordinates to world-pixels, based on the specified zoom level. 
	 * @param lat the latitude
	 * @param lon the longitude
	 * @param zoomLevel the zoom level 
	 * @return the resulting {y,x} coordinates (in pixels)
	 */
	public int[] coordsToPixels(double lat, double lon, int zoomLevel);
}
