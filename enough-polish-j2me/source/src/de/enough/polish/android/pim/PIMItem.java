//#condition polish.android
// generated by de.enough.doc2java.Doc2Java (www.enough.de) on Wed Mar 25 13:56:47 CET 2009
package de.enough.polish.android.pim;

/**
 * Represents the common interfaces of an item for a PIM list.
 * 
 * Represents the common interfaces of an item for a PIM list. A PIM item
 * represents a collection of data for a single PIM entry. A PIM item is created
 * from a particular PIM list and is associated with that list for the life of the
 * item. PIM items can have its data imported and exported using standard byte
 * based formats. Each implementing class defines what formats can be imported and
 * exported for that item.
 * </P>
 * <H3>Fields</H3>
 * <P>PIMItems reference its data through <i>fields</i>. A field is a grouping of data
 * values that all have similar characteristics. An example of a field is TEL,
 * which indicates data values for that particular field are telephone numbers.
 * Classes implementing the PIMItem interface defines the possible fields that for
 * that specific class (e.g TEL is defined in the <code>Contact</code> interface
 * as a field that a contact may support).
 * </P>
 * PIM implementations are not required to support all of the possible fields
 * defined in the classes implementing the PIMItem interface. This is because no
 * native PIM databases contain all of the fields defined in this API. The PIMList
 * that a PIMItem belongs to determines what fields a PIMItem can support and
 * store (all PIMItems in a particular PIMList support the same set of fields).
 * The <A HREF="../../../javax/microedition/pim/PIMList.html#getSupportedFields()"><CODE>PIMList.getSupportedFields()</CODE></A>
 * method from a particular PIMItem's PIMList is used to find out what fields are
 * supported within this item. Since not all possible fields are actually
 * supported in a particular PIMItem, <B>all fields should be checked for support in
 * the item's PIMList using <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedField(int)">
 * <CODE>PIMList.isSupportedField(int)</CODE></A> prior to being used in any
 * retrieval or storage method.</B>
 * </P>
 * <p>
 * Each field has the following pieces of information available for it:
 * <UL>
 * <LI>
 * Zero or more <i>data values</i>
 * associated with the Field
 * <LI>
 * <i>Attributes</i>
 * for data values for the Field
 * <LI>
 * Descriptive <i>label</i>
 * for the Field
 * <LI>
 * <I>Data Type</I> of the data associated with the Field</LI>
 * </UL>
 * <h5>Data Values in a Field</h5>
 * <p>A single field can have zero or more data values associated with it at any
 * instance. All values within a field have the same data type as dictated by the
 * field (for example, all Contact.TEL field data values must be of STRING type).
 * The data type of a field determines the add/get/set methods to use for
 * accessing the data values (for example, if a field requires STRING data types,
 * then addString, getString, and setString methods are used to access the data).
 * </p>
 * Data values within a field are treated as a variable-length array of values,
 * very similar to the behavior of a <code>Vector</code>. As such, the following
 * rules apply for accessing data values for fields:<br>
 * <ul>
 * <li>
 * Values are added using the appropriate addXXX() method. The value is appended
 * as the last data value in the field's array, similar to <code>Vector.addElement</code>.
 * <li>
 * Values are retrieved one at a time using the appropriate getXXX() method with
 * an index. The index is an array index into the field's array of data values.
 * Values are assigned a sequential index beginning from 0 for the first value in
 * a field up to n-1, where n is the total number of values currently assigned to
 * the field. This behavior is similar to the method <code>Vector.elementAt()</code>.
 * <li>
 * Values are removed from a field by using the method <A HREF="../../../javax/microedition/pim/PIMItem.html#removeValue(int, int)">
 * <CODE>removeValue(int, int)</CODE></A>. All indexes in the field's array
 * are guaranteed by the implementation to contain an assigned value. Therefore,
 * removing fields from the middle of a field's array causes compacting of the
 * array and reindexing of the data values. This is similar behavior to the method <code>
 * Vector.removeElement(Object)</code>.</li>
 * </ul>
 * <h5>Field Labels</h5>
 * <p>Each field has a human readable <i>label</i>, usually used for display purposes.
 * The label can be retrieved through <A HREF="../../../javax/microedition/pim/PIMList.html#getFieldLabel(int)">
 * <CODE>PIMList.getFieldLabel(int)</CODE></A>.
 * </p>
 * <h5>Field Data Types</h5>
 * <p>The data values for a field has a <i>data type</i>, such as <A HREF="../../../javax/microedition/pim/PIMItem.html#INT">
 * <CODE>INT</CODE></A>, <A HREF="../../../javax/microedition/pim/PIMItem.html#BINARY">
 * <CODE>BINARY</CODE></A>, <A HREF="../../../javax/microedition/pim/PIMItem.html#BOOLEAN">
 * <CODE>BOOLEAN</CODE></A>, <A HREF="../../../javax/microedition/pim/PIMItem.html#DATE">
 * <CODE>DATE</CODE></A>, <A HREF="../../../javax/microedition/pim/PIMItem.html#STRING_ARRAY">
 * <CODE>STRING_ARRAY</CODE></A> or <A HREF="../../../javax/microedition/pim/PIMItem.html#STRING">
 * <CODE>STRING</CODE></A>. The data type of the field's data can be retrieved
 * through <A HREF="../../../javax/microedition/pim/PIMList.html#getFieldDataType(int)">
 * <CODE>PIMList.getFieldDataType(int)</CODE></A>. All data values for a
 * particular field have the same data type.
 * </p>
 * <h4>Standard and Extended Fields</h4>
 * <p>Fields can be classified into two logical divisions: standard fields and
 * extended fields. This division of fields generally determines the portability
 * of the fields across implementations. Standard fields are specifically defined
 * within the javax.microedition.pim package and may be available on almost all
 * PIM implementations. Extended fields are platform specific fields defined by an
 * individual implementation and are therefore generally not portable across
 * different devices. Extended fields are generally defined in vendor specific
 * classes derived from this class.
 * </p>
 * <h5>Standard Fields</h5>
 * <P>Standard fields are fields that have IDs explicitly defined as part of the PIM
 * APIs in the javax.microedition.pim package. These fields are the common fields
 * among PIM lists and are more likely to be portable across PIM implementations
 * (but not guaranteed since not all platforms support the same fields in a
 * PIMItem).
 * </P>
 * <h5>Extended Fields</h5>
 * <p>Extended fields are fields that do not have a specific field explicitly defined
 * in the javax.microedition.pim package, but are defined in vendor-specific
 * classes in a separate vendor package. These fields may or may not be exposed
 * publicly in vendor specific classes. Vendors are allowed to extend the field
 * set for any of the PIM items in this manner to address any platform specific
 * fields they wish to support. Users can find out if a field is an extended field
 * by comparing its value against <A HREF="../../../javax/microedition/pim/PIMItem.html#EXTENDED_FIELD_MIN_VALUE">
 * <CODE>EXTENDED_FIELD_MIN_VALUE</CODE></A>, find out the field's allowed
 * data type through the method <A HREF="../../../javax/microedition/pim/PIMList.html#getFieldDataType(int)">
 * <CODE>PIMList.getFieldDataType(int)</CODE></A>, and find out the field's
 * label through the method<A HREF="../../../javax/microedition/pim/PIMList.html#getFieldLabel(int)"><CODE>PIMList.getFieldLabel(int)</CODE></A>.
 * </p>
 * <h4>Attributes</h4>
 * <p>Optional attributes can be provided to further describe individual data values
 * for a field. Attributes are specified when adding data values to a field. These
 * attributes are hints to the underlying implementation providing more
 * information about the data value than just a field can provide. Since they are
 * hints, they may or may not be ignored by the implementation when adding the
 * data values. The actual attributes used and associated with the data values
 * after adding can be retrieved by the method <A HREF="../../../javax/microedition/pim/PIMItem.html#getAttributes(int, int)">
 * <CODE>getAttributes(int, int)</CODE></A>. Attributes can also have human
 * readable labels associated with them, retrieved by the method <A HREF="../../../javax/microedition/pim/PIMList.html#getAttributeLabel(int)">
 * <CODE>PIMList.getAttributeLabel(int)</CODE></A>. If no attributes are to be
 * associated with a data value, then <A HREF="../../../javax/microedition/pim/PIMItem.html#ATTR_NONE">
 * <CODE>ATTR_NONE</CODE></A> must be used.
 * </p>
 * <p>
 * Attributes are handled in the API using a single bit to indicate a specific
 * attribute and using int values as bit arrays to indicate a set of attributes.
 * int values can be checked to see if they contain a specific attribute by using
 * bitwise AND (&amp;) with the attribute and the int value. <A HREF="../../../javax/microedition/pim/PIMItem.html#ATTR_NONE">
 * <CODE>ATTR_NONE</CODE></A> is a special attribute that indicates no
 * attributes are set and has a value of 0 that erases all other attributes
 * previously set.
 * </p>
 * <h5>Extended Attributes</h5>
 * <p>Optional attributes may also be extended by vendors and their PIM API
 * implementations. These extended attributes also may or may not be exposed
 * publicly in vendor specific classes. The label for these attributes can be
 * retrieved through <A HREF="../../../javax/microedition/pim/PIMList.html#getAttributeLabel(int)">
 * <CODE>PIMList.getAttributeLabel(int)</CODE></A>.
 * </p>
 * <h3>Categories</h3>
 * <p>Categories are string items assigned to an item to represent the item's
 * inclusion in a logical grouping. The category string correspond to category
 * values already existing in the PIMItem's associated PIMList. Category support
 * per list is optional, depending on the implementing PIMList class that the item
 * is associated with. The item's list determines if categories can be assigned,
 * and how many categories can be assigned per item.
 * </p>
 */
public interface PIMItem
{
	/**
	 * 
	 * Data type indicating data is binary in a byte array. Data associated with <code>BINARY</code>
	 * is retrieved via <A HREF="../../../javax/microedition/pim/PIMItem.html#getBinary(int, int)">
	 * <CODE>getBinary(int, int)</CODE></A> and added via <A HREF="../../../javax/microedition/pim/PIMItem.html#addBinary(int, int, byte[], int, int)">
	 * <CODE>addBinary(int, int, byte[], int, int)</CODE></A>.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	int BINARY = 0;

	/**
	 * 
	 * Data type indicating data is of boolean primitive data type. Data associated
	 * with <code>BOOLEAN</code> is retrieved via <A HREF="../../../javax/microedition/pim/PIMItem.html#getBoolean(int, int)">
	 * <CODE>getBoolean(int, int)</CODE></A> and added via <A HREF="../../../javax/microedition/pim/PIMItem.html#addBoolean(int, int, boolean)">
	 * <CODE>addBoolean(int, int, boolean)</CODE></A>.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	int BOOLEAN = 1;

	/**
	 * 
	 * Data type indicating data is a Date in long primitive data type format
	 * expressed in the same long value format as java.util.Date, which is
	 * milliseconds since the epoch (00:00:00 GMT, January 1, 1970). Data associated
	 * with <code>DATE</code> is retrieved via <A HREF="../../../javax/microedition/pim/PIMItem.html#getDate(int, int)">
	 * <CODE>getDate(int, int)</CODE></A> and added via <A HREF="../../../javax/microedition/pim/PIMItem.html#addDate(int, int, long)">
	 * <CODE>addDate(int, int, long)</CODE></A>.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	int DATE = 2;

	/**
	 * 
	 * Data type indicating data is of int primitive data type. Data associated with <code>
	 * INT</code> is retrieved via <A HREF="../../../javax/microedition/pim/PIMItem.html#getInt(int, int)">
	 * <CODE>getInt(int, int)</CODE></A> and added via <A HREF="../../../javax/microedition/pim/PIMItem.html#addInt(int, int, int)">
	 * <CODE>addInt(int, int, int)</CODE></A>.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	int INT = 3;

	/**
	 * 
	 * Data type indicating data is a String object. Data associated with <code>STRING</code>
	 * is retrieved via <A HREF="../../../javax/microedition/pim/PIMItem.html#getString(int, int)">
	 * <CODE>getString(int, int)</CODE></A> and added via <A HREF="../../../javax/microedition/pim/PIMItem.html#addString(int, int, java.lang.String)">
	 * <CODE>addString(int, int, java.lang.String)</CODE></A>.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	int STRING = 4;

	/**
	 * 
	 * Data type indicating data is a array of related fields returned in a string
	 * array. Data associated with <code>STRING_ARRAY</code> is retrieved via <A HREF="../../../javax/microedition/pim/PIMItem.html#getStringArray(int, int)">
	 * <CODE>getStringArray(int, int)</CODE></A> and added via <A HREF="../../../javax/microedition/pim/PIMItem.html#addStringArray(int, int, java.lang.String[])">
	 * <CODE>addStringArray(int, int, java.lang.String[])</CODE></A>.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	int STRING_ARRAY = 5;

	/**
	 * 
	 * Constant indicating that no additional attributes are applicable to a data
	 * value for a field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	int ATTR_NONE = 0;

	/**
	 * 
	 * Constant indicating the minimum possible value for an extended field constant.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	int EXTENDED_FIELD_MIN_VALUE = 16777216;

	/**
	 * 
	 * Constant indicating the minimum possible value for an extended attribute
	 * constant.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	int EXTENDED_ATTRIBUTE_MIN_VALUE = 16777216;


	/**
	 * 
	 * Returns the PIMList associated with this item. An item always have the same
	 * list associated with it for its life as an object once a list is associated
	 * with the item.
	 * <P></P>
	 * 
	 * 
	 * @return the PIMList that this item belongs to. If the item does not belong to any list, null is returned.
	 */
	PIMList getPIMList();

	/**
	 * 
	 * This method persists the data in the item to its PIM list. As data is changed
	 * in an item through other methods in this class, the data is not immediately
	 * written to the underlying data storage for the list. This method commits that
	 * data to the underlying data storage for the list.
	 * <p>
	 * Some devices may not allow categories in the item to be persisted which are not
	 * in the list returned from <A HREF="../../../javax/microedition/pim/PIMList.html#getCategories()">
	 * <CODE>PIMList.getCategories()</CODE></A>. In this case the categories are
	 * dropped silently when this method is invoked (this allows data imported using <A HREF="../../../javax/microedition/pim/PIM.html#fromSerialFormat(java.io.InputStream, java.lang.String)">
	 * <CODE>PIM.fromSerialFormat(java.io.InputStream, java.lang.String)</CODE></A>
	 * to be persisted).
	 * </p>
	 * <p>
	 * Also note that some field values may be altered during the commit to fit
	 * platform restrictions. A common example of this is Date fields. If a platform
	 * does not support storing its Date values with millisecond granularity, the
	 * platform rounds down the given Date value to its nearest value supported by the
	 * platform.
	 * </p>
	 * <P></P>
	 * 
	 * 
	 * @throws PIMException - if the commit encounters an error and cannot complete. Also thrown if the item does not belong to any list, or the list is closed or inaccessible.
	 * @throws java.lang.SecurityException - if the application has not been granted write access to the PIM list or the list is opened READ_ONLY.
	 */
	void commit() throws PIMException;

	/**
	 * 
	 * This method returns a boolean indicating whether any of this item's fields have
	 * been modified since the item was retrieved or last committed.
	 * <P></P>
	 * 
	 * 
	 * @return boolean true if any fields have been modified since the item was last retrieved or committed, false otherwise.
	 */
	boolean isModified();

	/**
	 * 
	 * Returns all fields in the item that have data stored for them. This allows
	 * quick access to all of the data stored in the item without having to iterate
	 * through all supported fields and checking if data is stored for the field or
	 * not.
	 * <P></P>
	 * 
	 * 
	 * @return int array of fields that have data currently stored for them. If no fields contain data, a zero length array is returned.
	 */
	int[] getFields();

	/**
	 * 
	 * Get a binary data value for a field from the item. <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedField(int)">
	 * <CODE>PIMList.isSupportedField(int)</CODE></A> should be used to verify the
	 * field validity for this item prior to invoking this method.
	 * <P></P>
	 * 
	 * 
	 * @param field - The field from which the data is retrieved.
	 * @param index - an index to a particular value associated with the field.
	 * @return a byte array representing a value for the field. The value is an inline binary data representation in a "B" binary encoded string as defined by [IETF RFC 2047].
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class.
	 * @throws java.lang.IndexOutOfBoundsException - if the index is negative or greater than or equal to the number of values currently contained in the field.
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 */
	byte[] getBinary(int field, int index);

	/**
	 * 
	 * Adds a binary data value to a field in the item. The value is appended as the
	 * last data value in the field's array, similar to <code>Vector.addElement</code>.
	 * <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedField(int)"><CODE>PIMList.isSupportedField(int)</CODE></A>
	 * should be used to verify the field validity for this item prior to invoking
	 * this method.
	 * <P></P>
	 * 
	 * 
	 * @param field - The field to which the value belongs.
	 * @param attributes - a bit array specifying any optional attributes describing this value. These attributes are a hint to the about the value's characteristics and some or all may be ignored by this method due to platform restrictions. Attributes that are invalid or not applicable are also ignored.
	 * @param value - The data to add to the field. The data is an inline binary data representation and must be in a "B" binary encoded string as defined by [IETF RFC 2047].
	 * @param offset - int indicating the offset into the provided byte array from where to start reading the binary data.
	 * @param length - int indicating the number of bytes to read from starting from the offset in the byte array. If the number of bytes available from the array are less than the length, only the remaining bytes are provided and the field's resulting binary data length is value.length - offset.
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class, the field does not have a data type of BINARY, offset is negative, offset is greater than or equal to the length of the value byte array, length is zero or negative, or the value array is length 0.
	 * @throws java.lang.NullPointerException - if value is null.
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 * @throws FieldFullException - if the field already contains the maximum number of data values it can hold.
	 */
	void addBinary(int field, int attributes, byte[] value, int offset, int length);

	/**
	 * 
	 * Sets an existing binary data value in a field to a new value. The value located
	 * at the provided index is set, similar to <code>Vector.setElementAt</code>. This
	 * method cannot be used to add new values to a field; use <A HREF="../../../javax/microedition/pim/PIMItem.html#addBinary(int, int, byte[], int, int)">
	 * <CODE>addBinary(int, int, byte[], int, int)</CODE></A>. <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedField(int)">
	 * <CODE>PIMList.isSupportedField(int)</CODE></A> should be used to verify the
	 * field validity for this item prior to invoking this method.
	 * <P></P>
	 * 
	 * 
	 * @param field - The field to which the value belongs.
	 * @param index - an index to a particular value associated with the field.
	 * @param attributes - a bit array specifying any optional attributes describing this value. These attributes are a hint to the about the value's characteristics and some or all may be ignored by this method due to platform restrictions. Attributes that are invalid or not applicable are also ignored.
	 * @param value - The new value of the data at the field's index. The data is an inline binary data representation and must be in a "B" binary encoded string as defined by [IETF RFC 2047].
	 * @param offset - int indicating the offset into the provided byte array from where to start reading the binary data.
	 * @param length - int indicating the number of bytes to read starting from the offset in the byte array. If the number of bytes available from the array are less than the length, only the remaining bytes are provided and the field's resulting binary data length is value.length - offset.
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class, if offset is negative, length is less than or equal to zero, or value is zero length.
	 * @throws java.lang.NullPointerException - if value is null.
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 * @throws java.lang.IndexOutOfBoundsException - if the index is negative or greater than or equal to the number of values currently contained in the field.
	 */
	void setBinary(int field, int index, int attributes, byte[] value, int offset, int length);

	/**
	 * 
	 * Get a date value from a field in the item. <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedField(int)">
	 * <CODE>PIMList.isSupportedField(int)</CODE></A> should be used to verify the
	 * field validity for this item prior to invoking this method.
	 * <P></P>
	 * 
	 * 
	 * @param field - The field from which the data is retrieved.
	 * @param index - an index to a particular value associated with the field.
	 * @return a date representing a value of the field, returned in the same long format as java.util.Date, which is milliseconds since the epoch (00:00:00 GMT, January 1, 1970).
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class.
	 * @throws java.lang.IndexOutOfBoundsException - if the index is negative or greater than or equal to the number of values currently contained in the field.
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 */
	long getDate(int field, int index);

	/**
	 * 
	 * Adds a date value to a field in the item. The value is appended as the last
	 * data value in the field's array, similar to <code>Vector.addElement</code>. <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedField(int)">
	 * <CODE>PIMList.isSupportedField(int)</CODE></A> should be used to verify the
	 * field validity for this item prior to invoking this method.
	 * <P></P>
	 * <P>
	 * Note that the value provided may be rounded-down by an implementation due to
	 * platform restrictions. For example, should a native PIM database on support
	 * date values with granularity in terms of seconds, then the provided date value
	 * is rounded down to the nearest second.
	 * </P>
	 * <P>
	 * </P>
	 * 
	 * 
	 * @param field - The field to which the value belongs.
	 * @param attributes - a bit array specifying any optional attributes describing this value. These attributes are a hint to the about the value's characteristics and some or all may be ignored by this method due to platform restrictions. Attributes that are invalid or not applicable are also ignored.
	 * @param value - The data to add to the field. The date must be expressed in the same long value format as java.util.Date, which is milliseconds since the epoch (00:00:00 GMT, January 1, 1970).
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class or the field does not have a data type of DATE.
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 * @throws FieldFullException - if the field already contains the maximum number of data values it can hold.
	 */
	void addDate(int field, int attributes, long value);

	/**
	 * 
	 * Sets an existing date data value in a field to a new value. The value located
	 * at the provided index is set, similar to <code>Vector.setElementAt</code>. This
	 * method cannot be used to add new values to a field; use <A HREF="../../../javax/microedition/pim/PIMItem.html#addDate(int, int, long)">
	 * <CODE>addDate(int, int, long)</CODE></A>. <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedField(int)">
	 * <CODE>PIMList.isSupportedField(int)</CODE></A> should be used to verify the
	 * field validity for this item prior to invoking this method.
	 * <P></P>
	 * <P>
	 * Note that the value provided may be rounded-down by an implementation due to
	 * platform restrictions. For example, should a native PIM database only support
	 * date values with granularity in terms of seconds, then the provided date value
	 * is rounded down to the nearest second.
	 * </P>
	 * <P>
	 * </P>
	 * 
	 * 
	 * @param field - The field to which the value belongs.
	 * @param index - an index to a particular value associated with the field.
	 * @param attributes - a bit array specifying any optional attributes describing this value. These attributes are a hint to the about the value's characteristics and some or all may be ignored by this method due to platform restrictions. Attributes that are invalid or not applicable are also ignored.
	 * @param value - The new value of the data at the field's index. The date must be expressed in the same long value format as java.util.Date, which is milliseconds since the epoch (00:00:00 GMT, January 1, 1970).
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class, or the field cannot be set to the value provided (e.g. the value is not valid for that field or this field's value is read-only).
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 * @throws java.lang.IndexOutOfBoundsException - if the index is negative or greater than or equal to the number of values currently contained in the field.
	 */
	void setDate(int field, int index, int attributes, long value);

	/**
	 * 
	 * Get an integer value from a field in the item. <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedField(int)">
	 * <CODE>PIMList.isSupportedField(int)</CODE></A> should be used to verify the
	 * field validity for this item prior to invoking this method.
	 * <P></P>
	 * 
	 * 
	 * @param field - The field from which the data is retrieved.
	 * @param index - an index to a particular value associated with the field.
	 * @return an int representing a value of the field.
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class.
	 * @throws java.lang.IndexOutOfBoundsException - if the index is negative or greater than or equal to the number of values currently contained in the field.
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 */
	int getInt(int field, int index);

	/**
	 * 
	 * Adds an integer value to a field in the item. The value is appended as the last
	 * data value in the field's array, similar to <code>Vector.addElement</code>. <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedField(int)">
	 * <CODE>PIMList.isSupportedField(int)</CODE></A> should be used to verify the
	 * field validity for this item prior to invoking this method.
	 * <P></P>
	 * 
	 * 
	 * @param field - The field to which the value belongs.
	 * @param attributes - a bit array specifying any optional attributes describing this value. These attributes are a hint to the about the value's characteristics and some or all may be ignored by this method due to platform restrictions. Attributes that are invalid or not applicable are also ignored.
	 * @param value - The data to add to the field.
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class or the field does not have a data type of INT.
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 * @throws FieldFullException - if the field already contains the maximum number of data values it can hold.
	 */
	void addInt(int field, int attributes, int value);

	/**
	 * 
	 * Sets an existing int data value in a field to a new value. The value located at
	 * the provided index is set, similar to <code>Vector.setElementAt</code>. This
	 * method cannot be used to add new values to a field; use <A HREF="../../../javax/microedition/pim/PIMItem.html#addInt(int, int, int)">
	 * <CODE>addInt(int, int, int)</CODE></A>. <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedField(int)">
	 * <CODE>PIMList.isSupportedField(int)</CODE></A> should be used to verify the
	 * field validity for this item prior to invoking this method.
	 * <P></P>
	 * 
	 * 
	 * @param field - The field to which the value belongs.
	 * @param index - an index to a particular value associated with the field.
	 * @param attributes - a bit array specifying any optional attributes describing this value. These attributes are a hint to the about the value's characteristics and some or all may be ignored by this method due to platform restrictions. Attributes that are invalid or not applicable are also ignored.
	 * @param value - The new value of the data at the field's index.
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class, or the field cannot be set to the value provided (e.g. the value is not valid for that field or this field's value is read-only).
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 * @throws java.lang.IndexOutOfBoundsException - if the index is negative or greater than or equal to the number of values currently contained in the field.
	 */
	void setInt(int field, int index, int attributes, int value);

	/**
	 * 
	 * Get a String value from a field in the item. <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedField(int)">
	 * <CODE>PIMList.isSupportedField(int)</CODE></A> should be used to verify the
	 * field validity for this item prior to invoking this method. The returned string
	 * contains no "escaped" characters that may have been used when importing the
	 * field's data.
	 * <P></P>
	 * 
	 * 
	 * @param field - The field from which the data is retrieved.
	 * @param index - an index to a particular value associated with the field.
	 * @return a String representing a value of the field. A null String (e.g. String("")) is a valid data value for string.
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class.
	 * @throws java.lang.IndexOutOfBoundsException - if the index is negative or greater than or equal to the number of values currently contained in the field.
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 */
	java.lang.String getString(int field, int index);

	/**
	 * 
	 * Adds a String value to a field in the item. The value is appended as the last
	 * data value in the field's array, similar to <code>Vector.addElement</code>. <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedField(int)">
	 * <CODE>PIMList.isSupportedField(int)</CODE></A> should be used to verify the
	 * field validity for this item prior to invoking this method. Values given to
	 * this method should not be "escaped"; i.e. having special characters marked in
	 * the string by a particular escape character. Any characters that requiring
	 * special handling such as these for importing and exporting is handled
	 * transparently by toSerialFormat and fromSerialFormat.
	 * <P></P>
	 * 
	 * 
	 * @param field - The field to which the value belongs.
	 * @param attributes - a bit array specifying any optional attributes describing this value. These attributes are a hint to the about the value's characteristics and some or all may be ignored by this method due to platform restrictions. Attributes that are invalid or not applicable are also ignored.
	 * @param value - The data to add to the field. A null String (e.g. String("")) is a valid data value for string.
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class or the field does not have a data type of STRING.
	 * @throws java.lang.NullPointerException - if value is null.
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 * @throws FieldFullException - if the field already contains the maximum number of data values it can hold.
	 */
	void addString(int field, int attributes, java.lang.String value);

	/**
	 * 
	 * Sets an existing String data value in a field to a new value. The value located
	 * at the provided index is set, similar to <code>Vector.setElementAt</code>. This
	 * method cannot be used to add new values to a field; use <A HREF="../../../javax/microedition/pim/PIMItem.html#addString(int, int, java.lang.String)">
	 * <CODE>addString(int, int, java.lang.String)</CODE></A>. <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedField(int)">
	 * <CODE>PIMList.isSupportedField(int)</CODE></A> should be used to verify the
	 * field validity for this item prior to invoking this method. Values given to
	 * this method should not be "escaped"; i.e. having special characters marked in
	 * the string by a particular escape character. Any characters that requiring
	 * special handling such as these for importing and exporting is handled
	 * transparently by toSerialFormat and fromSerialFormat.
	 * <P></P>
	 * 
	 * 
	 * @param field - The field to which the value belongs.
	 * @param index - an index to a particular value associated with the field.
	 * @param attributes - a bit array specifying any optional attributes describing this value. These attributes are a hint to the about the value's characteristics and some or all may be ignored by this method due to platform restrictions. Attributes that are invalid or not applicable are also ignored.
	 * @param value - The new value of the data at the field's index. A null String (e.g. String("")) is a valid data value for string.
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class, or the field cannot be set to the value provided (e.g. the value is not valid for that field or this field's value is read-only).
	 * @throws java.lang.NullPointerException - if value is null.
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 * @throws java.lang.IndexOutOfBoundsException - if the index is negative or greater than or equal to the number of values currently contained in the field.
	 */
	void setString(int field, int index, int attributes, java.lang.String value);

	/**
	 * 
	 * Get a boolean value from a field in the item. <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedField(int)">
	 * <CODE>PIMList.isSupportedField(int)</CODE></A> should be used to verify the
	 * field validity for this item prior to invoking this method.
	 * <P></P>
	 * 
	 * 
	 * @param field - The field from which the data is retrieved.
	 * @param index - an index to a particular value associated with the field.
	 * @return a boolean representing a value of the field.
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class.
	 * @throws java.lang.IndexOutOfBoundsException - if the index is negative or greater than or equal to the number of values currently contained in the field.
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 */
	boolean getBoolean(int field, int index);

	/**
	 * 
	 * Adds a boolean value to a field in the item. The value is appended as the last
	 * data value in the field's array, similar to <code>Vector.addElement</code>. <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedField(int)">
	 * <CODE>PIMList.isSupportedField(int)</CODE></A> should be used to verify the
	 * field validity for this item prior to invoking this method.
	 * <P></P>
	 * 
	 * 
	 * @param field - The field to which the value belongs.
	 * @param attributes - a bit array specifying any optional attributes describing this value. These attributes are a hint to the about the value's characteristics and some or all may be ignored by this method due to platform restrictions. Attributes that are invalid or not applicable are also ignored.
	 * @param value - The data to add to the field.
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class or the field does not have a data type of BOOLEAN.
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 * @throws FieldFullException - if the field already contains the maximum number of data values it can hold.
	 */
	void addBoolean(int field, int attributes, boolean value);

	/**
	 * 
	 * Sets an existing boolean data value in a field to a new value. The value
	 * located at the provided index is set, similar to <code>Vector.setElementAt</code>.
	 * This method cannot be used to add new values to a field; use <A HREF="../../../javax/microedition/pim/PIMItem.html#addBoolean(int, int, boolean)">
	 * <CODE>addBoolean(int, int, boolean)</CODE></A>. <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedField(int)">
	 * <CODE>PIMList.isSupportedField(int)</CODE></A> should be used to verify the
	 * field validity for this item prior to invoking this method.
	 * <P></P>
	 * 
	 * 
	 * @param field - The field to which the value belongs.
	 * @param index - an index to a particular value associated with the field.
	 * @param attributes - a bit array specifying any optional attributes describing this value. These attributes are a hint to the about the value's characteristics and some or all may be ignored by this method due to platform restrictions. Attributes that are invalid or not applicable are also ignored.
	 * @param value - The new value of the data at the field's index.
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class, or the field cannot be set to the value provided (e.g. the value is not valid for that field or this field's value is read-only).
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 * @throws java.lang.IndexOutOfBoundsException - if the index is negative or greater than or equal to the number of values currently contained in the field.
	 */
	void setBoolean(int field, int index, int attributes, boolean value);

	/**
	 * 
	 * Get an array of related values from a field in the item. <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedField(int)">
	 * <CODE>PIMList.isSupportedField(int)</CODE></A> should be used to verify the
	 * field validity for this item prior to invoking this method.
	 * <P></P>
	 * <P>
	 * Not all elements in the array are required to be supported by the item. If an
	 * array index is not supported by this item, <code>null</code> is the value for
	 * the String at the array index.
	 * </P>
	 * <P>
	 * </P>
	 * 
	 * 
	 * @param field - The field from which the data is retrieved.
	 * @param index - an index to a particular value associated with the field.
	 * @return a String array representing a group of related values from the field.
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class.
	 * @throws java.lang.IndexOutOfBoundsException - if the index is negative or greater than or equal to the number of values currently contained in the field.
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 */
	java.lang.String[] getStringArray(int field, int index);

	/**
	 * 
	 * Adds an array of related string values as a single entity to a field in the
	 * item. The array is appended as the last data value in the field's array of
	 * values, similar to <code>Vector.addElement</code>. <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedField(int)">
	 * <CODE>PIMList.isSupportedField(int)</CODE></A> should be used to verify the
	 * field validity for this item prior to invoking this method.
	 * <P></P>
	 * <P>
	 * Not all elements in the array are required to be supported by the item. If a
	 * String is provided at an array index that is not supported by this item, that
	 * value is silently discarded. <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedArrayElement(int, int)">
	 * <CODE>PIMList.isSupportedArrayElement(int, int)</CODE></A> should be used
	 * to verify the validity of the array element prior to invoking this method.
	 * </P>
	 * <P>
	 * </P>
	 * 
	 * 
	 * @param field - The field to which the value belongs.
	 * @param attributes - a bit array specifying any optional attributes describing this value. These attributes are a hint to the about the value's characteristics and some or all may be ignored by this method due to platform restrictions. Attributes that are invalid or not applicable are also ignored.
	 * @param value - The data to add to the field. At least one index in the array must contain a String object.
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class or all of the strings in the array are null or the field does not have a data type of STRING_ARRAY.
	 * @throws java.lang.NullPointerException - if value is null.
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 * @throws FieldFullException - if the field already contains the maximum number of data values it can hold.
	 */
	void addStringArray(int field, int attributes, java.lang.String[] value);

	/**
	 * 
	 * Sets an existing String array data value in a field to a new value. The value
	 * located at the provided index is set, similar to <code>Vector.setElementAt</code>.
	 * This method cannot be used to add new values to a field; use <A HREF="../../../javax/microedition/pim/PIMItem.html#addStringArray(int, int, java.lang.String[])">
	 * <CODE>addStringArray(int, int, java.lang.String[])</CODE></A>. <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedField(int)">
	 * <CODE>PIMList.isSupportedField(int)</CODE></A> should be used to verify the
	 * field validity for this item prior to invoking this method.
	 * <P></P>
	 * <P>
	 * Not all elements in the array are required to be supported by the item. If a
	 * String is provided at an array index that is not supported by this item, that
	 * value is silently discarded. <A HREF="../../../javax/microedition/pim/PIMList.html#isSupportedArrayElement(int, int)">
	 * <CODE>PIMList.isSupportedArrayElement(int, int)</CODE></A> should be used
	 * to verify the validity of the array element prior to invoking this method.
	 * </P>
	 * <P></P>
	 * 
	 * 
	 * @param field - The field to which the value belongs.
	 * @param index - an index to a particular value associated with the field.
	 * @param attributes - a bit array specifying any optional attributes describing this value. These attributes are a hint to the about the value's characteristics and some or all may be ignored by this method due to platform restrictions. Attributes that are invalid or not applicable are also ignored.
	 * @param value - The new value of the data at the field's index. At least one index in the array must contain a String object.
	 * @throws java.lang.NullPointerException - if value is null.
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class, all of the strings in the array are null, or the field cannot be set to the value provided (e.g. the value is not valid for that field or this field's value is read-only).
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 * @throws java.lang.IndexOutOfBoundsException - if the index is negative or greater than or equal to the number of values currently contained in the field.
	 */
	void setStringArray(int field, int index, int attributes, java.lang.String[] value);

	/**
	 * 
	 * Returns the number of data values currently set in a particular field.
	 * <P></P>
	 * 
	 * 
	 * @param field - The field from which the current count of values is returned.
	 * @return int indicating the number of values currently assigned to the field in this item.
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class.
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 */
	int countValues(int field);

	/**
	 * 
	 * Removes the value at the given index for the indicated field in this item. Note
	 * that all indexes in the field's array are guaranteed by the implementation to
	 * contain an assigned value. Therefore, removing fields from a field's array may
	 * cause compacting of the array and reindexing of the data values. This is
	 * similar behavior to the method <code>Vector.removeElement(Object)</code>.
	 * <P></P>
	 * 
	 * 
	 * @param field - The field from which the data is removed.
	 * @param index - an index to a particular value associated with the field.
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class.
	 * @throws java.lang.IndexOutOfBoundsException - if the index is negative or greater than or equal to the number of values currently contained in the field.
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 */
	void removeValue(int field, int index);

	/**
	 * 
	 * Gets the actual attributes associated with the data value at the given index
	 * for the indicated field. The attributes are returned in an int that represents
	 * an array of attribute bits.
	 * <P></P>
	 * 
	 * 
	 * @param field - The field from which the data is removed.
	 * @param index - an index to a particular value associated with the field.
	 * @return int representing the attributes assigned to the value at the given field and index. The int contains attribute values logically OR'd together in a bit array. Individual attributes can be checked for in this bit array by using bitwise AND (&amp;) with the attribute and the array.
	 * @throws java.lang.IllegalArgumentException - if the field is not valid for the implementing class.
	 * @throws java.lang.IndexOutOfBoundsException - if the index is negative or greater than or equal to the number of values currently contained in the field.
	 * @throws UnsupportedFieldException - if the field is not supported in the implementing instance of the class.
	 */
	int getAttributes(int field, int index);

	/**
	 * 
	 * Adds a category to this item. It is recommended to use the category names
	 * defined in <A HREF="../../../javax/microedition/pim/PIMList.html#getCategories()"><CODE>
	 * PIMList.getCategories()</CODE></A> from the list associated with this
	 * item. Some devices may not allow categories to be added which are not in the
	 * list returned from <A HREF="../../../javax/microedition/pim/PIMList.html#getCategories()">
	 * <CODE>PIMList.getCategories()</CODE></A>. In this case a <code>PIMException</code>
	 * may be thrown. If the given category is already associated with this item, the
	 * category is not added again and the method call is considered successful and
	 * returns.
	 * <p>
	 * The category names are case sensitive in this API, but not necessarily in the
	 * underlying implementation. For example, "Work" and "WORK" map to the same
	 * underlying category if the platform's implementation of categories is
	 * case-insensitive; adding both separately would result in the item being
	 * assigned to only one category in this case.
	 * <P></P>
	 * 
	 * 
	 * @param category - the category to add
	 * @throws java.lang.NullPointerException - if category is null.
	 * @throws PIMException - may be thrown if category is not in the list's category list and the list prevents that condition from occurring. Also thrown if categories are not supported in the implementation. Also thrown if the max categories that this item can be assigned to is exceeded.
	 */
	void addToCategory(java.lang.String category) throws PIMException;

	/**
	 * 
	 * Remove a category from this item. If the given category is already removed from
	 * this item, the method call is considered successful and returns.
	 * <p>
	 * The category names are case sensitive in this API, but not necessarily in the
	 * underlying implementation. For example, "Work" and "WORK" map to the same
	 * underlying category if the platform's implementation of categories is
	 * case-insensitive; removing both separately would result in the item being
	 * removed from only one category in this case.
	 * <P></P>
	 * 
	 * 
	 * @param category - the category to remove
	 * @throws java.lang.NullPointerException - if category is null
	 */
	void removeFromCategory(java.lang.String category);

	/**
	 * 
	 * Returns all the categories for that the item belongs to. If there are no
	 * categories assigned to this item, a zero length array is returned.
	 * <P></P>
	 * 
	 * 
	 * @return a string array of all the categories for the item.
	 */
	java.lang.String[] getCategories();

	/**
	 * 
	 * Returns the maximum number of categories that this item can be assigned to.
	 * <P></P>
	 * 
	 * 
	 * @return int the number of categories this item can be assigned to. 0 indicates no category support and -1 indicates there is no limit to the number of categories that this item can be assigned to.
	 */
	int maxCategories();

}
