//#condition polish.android
// generated by de.enough.doc2java.Doc2Java (www.enough.de) on Wed Mar 25 13:56:47 CET 2009
package de.enough.polish.android.pim;

/**
 * Represents a description for a repeating pattern for an Event item. The fields
 * are a subset of the capabilities of the RRULE field in VEVENT defined by the
 * vCalendar 1.0 specification from the Internet Mail Consortium
 * (http://www.imc.org). It is use to determine how often an associated Event
 * occurs.
 * 
 * The fields of a Repeat Rule can conceptually be grouped into two categories:
 * <ul>
 * <li>
 * Frequency of a Repeat Rule
 * <li>
 * Fields that modify or refine the Frequency of a Repeat Rule</li>
 * </ul>
 * This means that a Repeat Rule's calculation of applicable dates start with a
 * repeating frequency (such as weekly, daily, yearly, or monthly) and then other
 * fields refine or modify the repeat characteristics according to the field (e.g.
 * the COUNT field specifies that only X repeat occurrences happen at the given
 * frequency). The first category contains only <code>FREQUENCY</code>, while all
 * other repeat rule fields are classified in the second category. This
 * classification of the fields aids in understanding of the relationship of the
 * fields and allows for a method to query for supported fields (see <A HREF="../../../javax/microedition/pim/EventList.html#getSupportedRepeatRuleFields(int)">
 * <CODE>EventList.getSupportedRepeatRuleFields(int)</CODE></A>
 * ).
 * <P></P>
 * A repeat rule typically needs to have its frequency set first and foremost. The
 * following table shows the valid values for the frequency fields that can be set
 * in RepeatRule:</P>
 * <table BORDER="1">
 * <TR>
 * <th>
 * Fields
 * </th>
 * <th>
 * Set Method
 * </th>
 * <th>
 * Valid Values
 * </th>
 * </TR>
 * <tr>
 * <td><code>FREQUENCY</code></td>
 * <td><code>setInt</code></td>
 * <td><code>DAILY, WEEKLY, MONTHLY, YEARLY</code></td>
 * </tr>
 * </table>
 * The following table shows the valid values for the fields that modify or refine
 * the frequency of a RepeatRule:</P>
 * <table BORDER="1">
 * <TR>
 * <th>
 * Fields
 * </th>
 * <th>
 * Set Method
 * </th>
 * <th>
 * Valid Values
 * </th>
 * </TR>
 * <tr>
 * <td><code>COUNT</code></td>
 * <td><code>setInt</code></td>
 * <td>any positive int</td>
 * </tr>
 * <tr>
 * <td><code>INTERVAL</code></td>
 * <td><code>setInt</code></td>
 * <td>any positive int</td>
 * </tr>
 * <tr>
 * <td><code>END</code></td>
 * <td><code>setDate</code></td>
 * <td>any valid Date</td>
 * </tr>
 * <tr>
 * <td><code>MONTH_IN_YEAR</code></td>
 * <td><code>setInt</code></td>
 * <td><code>JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER,
 * NOVEMBER, DECEMBER</code> (Note: that these are constants defined in the
 * RepeatRule class and are not the same as those in the Calendar class)</td>
 * </tr>
 * <tr>
 * <td><code>DAY_IN_WEEK</code></td>
 * <td><code>setInt</code></td>
 * <td><CODE>SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY </CODE>(Note:
 * that these are constants defined in the RepeatRule class and are not the same
 * as those in the Calendar class)</td>
 * </tr>
 * <tr>
 * <td><code>WEEK_IN_MONTH</code></td>
 * <td><code>setInt</code></td>
 * <td><CODE>FIRST, SECOND, THIRD, FOURTH, FIFTH, LAST, SECONDLAST, THIRDLAST, FOURTHLAST,
 * FIFTHLAST</CODE></td>
 * </tr>
 * <tr>
 * <td><code>DAY_IN_MONTH</code></td>
 * <td><code>setInt</code></td>
 * <td>1-31</td>
 * </tr>
 * <tr>
 * <td><code>DAY_IN_YEAR</code></td>
 * <td><code>setInt</code></td>
 * <td>1-366</td>
 * </tr>
 * </table>
 * <h3>Examples</h3>
 * <P>The following examples demonstrate some possible repeat values.</P>
 * To specify the associated event occurs every day:
 * <br>
 * <pre><code>
 * setInt(RepeatRule.FREQUENCY, RepeatRule.DAILY);</code></pre>
 * To specify the associated event occurs every day for the next five days:
 * <br>
 * <pre><code>
 * setInt(RepeatRule.FREQUENCY, RepeatRule.DAILY);
 * setInt(RepeatRule.COUNT, 5);</code></pre>
 * To specify this event occurs every week on Monday and Tuesday:
 * <br>
 * <pre><code>
 * setInt(RepeatRule.FREQUENCY, RepeatRule.WEEKLY);
 * setInt(RepeatRule.DAY_IN_WEEK, RepeatRule.MONDAY | RepeatRule.TUESDAY);</code></pre>
 * To specify the associated event occurs every third week on Friday:
 * <br>
 * <pre><code>
 * setInt(RepeatRule.FREQUENCY, RepeatRule.WEEKLY);
 * setInt(RepeatRule.INTERVAL, 3);
 * setInt(RepeatRule.DAY_IN_WEEK, RepeatRule.FRIDAY);</code></pre>
 * To specify the associated event occurs every month on the Wednesday of the
 * second week until the end of the current year:
 * <br>
 * <pre><code>
 * setInt(RepeatRule.FREQUENCY, RepeatRule.MONTHLY);
 * setInt(RepeatRule.WEEK_IN_MONTH, RepeatRule.SECOND);
 * setInt(RepeatRule.DAY_IN_WEEK, RepeatRule.WEDNESDAY);
 * java.util.Calendar cal = Calendar.getInstance();
 * cal.set(Calendar.MONTH, Calendar.DECEMBER);
 * cal.set(Calendar.DAY_OF_MONTH, 31);
 * cal.set(Calendar.AM_PM, Calendar.PM);
 * cal.set(Calendar.HOUR_OF_DAY, 23);
 * cal.set(Calendar.MINUTE, 59);
 * setDate(RepeatRule.END, cal.getTime().getTime());</code></pre>
 * To specify the associated event occurs every year on the Sunday of the second
 * week in May:
 * <br>
 * <pre><code>
 * setInt(RepeatRule.FREQUENCY, RepeatRule.YEARLY);
 * setInt(RepeatRule.MONTH_IN_YEAR, RepeatRule.MAY);
 * setInt(RepeatRule.WEEK_IN_MONTH, RepeatRule.SECOND);
 * setInt(RepeatRule.DAY_IN_WEEK, RepeatRule.SUNDAY);</code></pre>
 * To specify the associated event occurs every year on the 4th of July:
 * <br>
 * <pre><code>
 * setInt(RepeatRule.FREQUENCY, RepeatRule.YEARLY);
 * setInt(RepeatRule.MONTH_IN_YEAR, RepeatRule.JULY);
 * setInt(RepeatRule.DAY_IN_MONTH, 4);</code></pre>
 * To specify the associated event occurs every year on the first day:
 * <br>
 * <pre><code>
 * setInt(RepeatRule.FREQUENCY, RepeatRule.YEARLY);
 * setInt(RepeatRule.DAY_IN_YEAR, 1);</code></pre>
 * To check if a particular Repeat Rule frquency value is supported for events for
 * a certain event list:<br>
 * <pre><code>
 * // Check if RepeatRule.DAILY is supported in the default event list
 * 
 * EventList el = PIM.openPIMList(PIM.EVENT_LIST, PIM.READ_WRITE);
 * int[] supported_fields = el.getSupportedRepeatRuleFields(RepeatRule.DAILY);
 * if (supported_fields.length &gt; 0) {
 * System.out.println("RepeatRule.DAILY is supported in default event list");
 * }
 * </code></pre>
 * To check if a particular Repeat Rule field is supported for events for a
 * certain event list:<br>
 * <pre><code>
 * // Check if RepeatRule.INTERVAL is supported for DAILY frequency events
 * 
 * EventList el = PIM.openPIMList(PIM.EVENT_LIST, PIM.READ_WRITE);
 * int[] supported_fields = el.getSupportedRepeatRuleFields(RepeatRule.DAILY);
 * int i = 0;
 * while (i &lt; supported_fields.length)
 * if (supported_fields[i] &amp; RepeatRule.INTERVAL != 0) {
 * System.out.println("INTERVAL supported in default event list");
 * break;
 * }
 */
public class RepeatRule extends java.lang.Object
{
	/**
	 * 
	 * Field specifying the frequency of the Repeat. This field has a value of either <code>
	 * DAILY</code>, <code>WEEKLY</code>, <code>MONTHLY</code> or <code>YEARLY</code>.
	 * The default data value associated with this field in RepeatRule is <code>DAILY</code>.
	 * This field can be checked for support by <A HREF="../../../javax/microedition/pim/EventList.html#getSupportedRepeatRuleFields(int)">
	 * <CODE>EventList.getSupportedRepeatRuleFields(int)</CODE></A>.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 */
	public static final int FREQUENCY = 0;

	/**
	 * 
	 * Field specifying the day of the month an Event occurs; for example, 15. This
	 * value is 1 based from the first day of the month. This field can be checked for
	 * support in the bit array values returned by <A HREF="../../../javax/microedition/pim/EventList.html#getSupportedRepeatRuleFields(int)">
	 * <CODE>EventList.getSupportedRepeatRuleFields(int)</CODE></A>.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 */
	public static final int DAY_IN_MONTH = 1;

	/**
	 * 
	 * Field specifying the days of the week an Event occurs. To set multiple days, OR
	 * the values together (e.g. <code>MONDAY | THURSDAY</code>). Retrieval of data
	 * for this field can contain multiple days OR'd together in the same manner as
	 * setting the value. This field can be checked for support in the bit array
	 * values returned by <A HREF="../../../javax/microedition/pim/EventList.html#getSupportedRepeatRuleFields(int)">
	 * <CODE>EventList.getSupportedRepeatRuleFields(int)</CODE></A>.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 */
	public static final int DAY_IN_WEEK = 2;

	/**
	 * 
	 * Field specifying the day of the year an Event occurs; for example, 134. This
	 * value is 1 based from the first day of the beginning of the year. This field
	 * can be checked for support in the bit array values returned by <A HREF="../../../javax/microedition/pim/EventList.html#getSupportedRepeatRuleFields(int)">
	 * <CODE>EventList.getSupportedRepeatRuleFields(int)</CODE></A>.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 */
	public static final int DAY_IN_YEAR = 4;

	/**
	 * 
	 * Field specifying the month in which an event occurs. To set multiple months, OR
	 * the values together (e.g. <code>RepeatRule.JANUARY | RepeatRule.FEBRUARY </code>
	 * ). Retrieval of data for this field can contain multiple months OR'd together
	 * in the same manner as setting the value. This field can be checked for support
	 * in the bit array values returned by <A HREF="../../../javax/microedition/pim/EventList.html#getSupportedRepeatRuleFields(int)">
	 * <CODE>EventList.getSupportedRepeatRuleFields(int)</CODE></A>.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int MONTH_IN_YEAR = 8;

	/**
	 * 
	 * Field specifying which week in a month a particular event occurs. To set
	 * multiple weeks, OR the values together (e.g. <code>FIRST | LAST | SECOND |
	 * SECONDLAST</code>). Retrieval of data for this field can contain multiple
	 * weeks OR'd together in the same manner as setting the value. This field can be
	 * checked for support in the bit array values returned by <A HREF="../../../javax/microedition/pim/EventList.html#getSupportedRepeatRuleFields(int)">
	 * <CODE>EventList.getSupportedRepeatRuleFields(int)</CODE></A>.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int WEEK_IN_MONTH = 16;

	/**
	 * 
	 * Field specifying the number of times this event repeats including the first
	 * time, starting from the first time the event starts (derived from <code>Event.START</code>)
	 * and continuing to the last date of the repeat (defined by <code>RepeatRule.END</code>).
	 * <code>COUNT</code> controls the number of times the event occurs during the
	 * period and is used with RepeatRule interval and the frequency to calculate when
	 * the event occurs. <code>RepeatRule.END</code> overrides this data if the end is
	 * reached prior to the count finishing. If <CODE>COUNT</CODE> is 0 and <CODE>END</CODE>
	 * is <code>null</code>, the event repeats forever. This field can be checked for
	 * support in the bit array values returned by <A HREF="../../../javax/microedition/pim/EventList.html#getSupportedRepeatRuleFields(int)">
	 * <CODE>EventList.getSupportedRepeatRuleFields(int)</CODE></A>.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int COUNT = 32;

	/**
	 * 
	 * Field specifying the ending date of the repeating event. Data for this field is
	 * expressed in the same long value format as java.util.Date, which is
	 * milliseconds since the epoch (00:00:00 GMT, January 1, 1970). This field can be
	 * checked for support in the bit array values returned by <A HREF="../../../javax/microedition/pim/EventList.html#getSupportedRepeatRuleFields(int)">
	 * <CODE>EventList.getSupportedRepeatRuleFields(int)</CODE></A>.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int END = 64;

	/**
	 * 
	 * Field specifying the number of iterations of the frequency between occurring
	 * dates, or how often the frequency repeats. For example, for every other day the <code>
	 * FREQUENCY</code> is <code>DAILY</code> and <code>INTERVAL</code> is 2. The
	 * default value for data associated with this field is 1. This field can be
	 * checked for support in the bit array values returned by <A HREF="../../../javax/microedition/pim/EventList.html#getSupportedRepeatRuleFields(int)">
	 * <CODE>EventList.getSupportedRepeatRuleFields(int)</CODE></A>.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int INTERVAL = 128;

	/**
	 * 
	 * Used for frequency when the Event happens every day.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int DAILY = 16;

	/**
	 * 
	 * Used for frequency when the Event happens every week.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int WEEKLY = 17;

	/**
	 * 
	 * Used for frequency when the Event happens every month.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int MONTHLY = 18;

	/**
	 * 
	 * Used for frequency when the Event happens every year.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int YEARLY = 19;

	/**
	 * 
	 * Constant for the first week of the month used with <code>WEEK_OF_MONTH</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int FIRST = 1;

	/**
	 * 
	 * Constant for the second week of the month used with <code>WEEK_OF_MONTH</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int SECOND = 2;

	/**
	 * 
	 * Constant for the third week of the month used with <code>WEEK_OF_MONTH</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int THIRD = 3;

	/**
	 * 
	 * Constant for the fourth week of the month used with <code>WEEK_OF_MONTH</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int FOURTH = 4;

	/**
	 * 
	 * Constant for the fifth week of the month used with <code>WEEK_OF_MONTH</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int FIFTH = 5;

	/**
	 * 
	 * Constant for the last week of the month used with <code>WEEK_OF_MONTH</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int LAST = 32;

	/**
	 * 
	 * Constant for the second to last week of the month used with <code>WEEK_OF_MONTH</code>
	 * field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int SECONDLAST = 64;

	/**
	 * 
	 * Constant for the third to last week of the month used with <code>WEEK_OF_MONTH</code>
	 * field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int THIRDLAST = 128;

	/**
	 * 
	 * Constant for the fourth to last week of the month used with <code>WEEK_OF_MONTH</code>
	 * field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int FOURTHLAST = 256;

	/**
	 * 
	 * Constant for the fifth to last week of the month used with <code>WEEK_OF_MONTH</code>
	 * field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int FIFTHLAST = 512;

	/**
	 * 
	 * Constant for the day of week Saturday used with <code>DAY_IN_WEEK</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int SATURDAY = 1024;

	/**
	 * 
	 * Constant for the day of week Friday used with <code>DAY_IN_WEEK</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int FRIDAY = 2048;

	/**
	 * 
	 * Constant for the day of week Thursday used with <code>DAY_IN_WEEK</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int THURSDAY = 4096;

	/**
	 * 
	 * Constant for the day of week Wednesday used with <code>DAY_IN_WEEK</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int WEDNESDAY = 8192;

	/**
	 * 
	 * Constant for the day of week Tuesday used with <code>DAY_IN_WEEK</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int TUESDAY = 16384;

	/**
	 * 
	 * Constant for the day of week Monday used with <code>DAY_IN_WEEK</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int MONDAY = 32768;

	/**
	 * 
	 * Constant for the day of week Sunday used with <code>DAY_IN_WEEK</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int SUNDAY = 65536;

	/**
	 * 
	 * Constant for the month of January used with <code>MONTH_IN_YEAR</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int JANUARY = 131072;

	/**
	 * 
	 * Constant for the month of February used with <code>MONTH_IN_YEAR</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int FEBRUARY = 262144;

	/**
	 * 
	 * Constant for the month of March used with <code>MONTH_IN_YEAR</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int MARCH = 524288;

	/**
	 * 
	 * Constant for the month of April used with <code>MONTH_IN_YEAR</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int APRIL = 1048576;

	/**
	 * 
	 * Constant for the month of May used with <code>MONTH_IN_YEAR</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int MAY = 2097152;

	/**
	 * 
	 * Constant for the month of June used with <code>MONTH_IN_YEAR</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int JUNE = 4194304;

	/**
	 * 
	 * Constant for the month of July used with <code>MONTH_IN_YEAR</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int JULY = 8388608;

	/**
	 * 
	 * Constant for the month of August used with <code>MONTH_IN_YEAR</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int AUGUST = 16777216;

	/**
	 * 
	 * Constant for the month of September used with <code>MONTH_IN_YEAR</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int SEPTEMBER = 33554432;

	/**
	 * 
	 * Constant for the month of October used with <code>MONTH_IN_YEAR</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int OCTOBER = 67108864;

	/**
	 * 
	 * Constant for the month of November used with <code>MONTH_IN_YEAR</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int NOVEMBER = 134217728;

	/**
	 * 
	 * Constant for the month of December used with <code>MONTH_IN_YEAR</code> field.
	 * <P>
	 * <DT><B>See Also:</B>
	 * Field Values</A></DD></DL>
	 * 
	 */
	public static final int DECEMBER = 268435456;

	//following variables are implicitely defined by getter- or setter-methods:
	private java.util.Enumeration exceptDates;
	private int[] fields;

	/**
	 * 
	 * Default constructor.
	 * <P></P>
	 * 
	 */
	public RepeatRule()
	{
		//TODO implement RepeatRule
	}

	/**
	 * 
	 * Returns an Enumeration of dates on which an Event would occur. A start date is
	 * specified form which the repeating rule is applied to generate dates. Then a
	 * beginning date and a start date is also provided to return only a subset of all
	 * possible occurrences of an Event within the given timeframe. The sequence of
	 * the items is by date. Exceptional dates are not included in the returned
	 * Enumeration.
	 * <BR>
	 * For example, an Event may happen every Monday during a year starting on January
	 * 1st. However, one wants to know occurrences of the Event during the month of
	 * June only. The startDate parameter specifies the anchor point for the Event
	 * from which it begins repeating, and the subsetBeginning and subsetEnding
	 * parameters would limit the Events returned to those only in June in this
	 * example.
	 * <P></P>
	 * 
	 * 
	 * @param startDate - the start date for the sequence, from which the repeat rule is applied to generate possible occurrence dates. This value must be expressed in the same long value format as java.util.Date, which is milliseconds since the epoch (00:00:00 GMT, January 1, 1970).
	 * @param subsetBeginning - the beginning date of the period for which events should be returned. This value must be expressed in the same long value format as java.util.Date, which is milliseconds since the epoch (00:00:00 GMT, January 1, 1970).
	 * @param subsetEnding - the end date of the period for which events should be returned. This value must be expressed in the same long value format as java.util.Date, which is milliseconds since the epoch (00:00:00 GMT, January 1, 1970).
	 * @return an Enumeration of dates for the given parameters, with the Enumeration containing  java.util.Date instances.
	 * @throws java.lang.IllegalArgumentException - if beginning is greater than ending.
	 */
	public java.util.Enumeration dates(long startDate, long subsetBeginning, long subsetEnding)
	{
		return null;
		//TODO implement dates
	}

	/**
	 * 
	 * Add a Date for which this RepeatRule should not occur. This value may be
	 * rounded off to the date only from a date time stamp if the underlying platform
	 * implementation only supports date fields with dates only and not date time
	 * stamps.
	 * <P></P>
	 * 
	 * 
	 * @param date - the date to add to the list of except dates, expressed in the same long value format as java.util.Date, which is milliseconds since the epoch (00:00:00 GMT, January 1, 1970).
	 */
	public void addExceptDate(long date)
	{
		//TODO implement addExceptDate
	}

	/**
	 * 
	 * Remove a Date for which this RepeatRule should not occur. If the date was in
	 * the list of except dates, it is removed.
	 * <P></P>
	 * 
	 * 
	 * @param date - the date to remove from the list of except dates expressed in the same long value format as java.util.Date, which is milliseconds since the epoch (00:00:00 GMT, January 1, 1970).
	 */
	public void removeExceptDate(long date)
	{
		//TODO implement removeExceptDate
	}

	/**
	 * 
	 * Returns the Dates for which this RepeatRule should not occur.
	 * <P></P>
	 * 
	 * 
	 * @return an Enumeration of dates for which this RepeatRule should not occur, with the Enumeration containing java.util.Date instances.
	 */
	public java.util.Enumeration getExceptDates()
	{
		return this.exceptDates;
	}

	/**
	 * 
	 * Retrieves an integer field. The field values can be one of <code>COUNT,
	 * DAY_IN_MONTH, FREQUENCY, INTERVAL, MONTH_IN_YEAR, WEEK_IN_MONTH, DAY_IN_WEEK,
	 * DAY_IN_YEAR</code>. <A HREF="../../../javax/microedition/pim/RepeatRule.html#getFields()">
	 * <CODE>getFields()</CODE></A> should be checked prior to invoking the method
	 * to ensure the field has a value associated with it.
	 * <P></P>
	 * 
	 * 
	 * @param field - The field to get, for example COUNT.
	 * @return an int representing the value of the field.
	 * @throws java.lang.IllegalArgumentException - if field is not one of the the valid RepeatRule fields for this method.
	 * @throws FieldEmptyException - if the field does is a valid integer field but does not have any data values assigned to it.
	 */
	public int getInt(int field)
	{
		return 0;
		//TODO implement getInt
	}

	/**
	 * 
	 * Sets an integer field. The field value can be one of <code>COUNT, DAYNUMBER,
	 * FREQUENCY, INTERVAL, MONTH_IN_YEAR, WEEK_IN_MONTH, DAY_IN_WEEK, DAY_IN_YEAR</code>.
	 * <P></P>
	 * 
	 * 
	 * @param field - The field to set, for example COUNT.
	 * @param value - The value to set the field to.
	 * @throws java.lang.IllegalArgumentException - if field is not one of the the valid RepeatRule fields for this method, or the value provided is not a valid value for the given field.
	 */
	public void setInt(int field, int value)
	{
		//TODO implement setInt
	}

	/**
	 * 
	 * Retrieves a Date field. The field value is currently limited to <code>END</code>.
	 * <A HREF="../../../javax/microedition/pim/RepeatRule.html#getFields()"><CODE>getFields()</CODE></A>
	 * should be checked prior to invoking the method to ensure the field has a value
	 * associated with it.
	 * <P></P>
	 * 
	 * 
	 * @param field - The field to get.
	 * @return a Date representing the value of the field, expressed in the same long value format as java.util.Date, which is milliseconds since the epoch (00:00:00 GMT, January 1, 1970).
	 * @throws java.lang.IllegalArgumentException - if field is not one of the the valid RepeatRule fields for this method.
	 * @throws FieldEmptyException - if the field does is a valid date field but does not have any data values assigned to it.
	 */
	public long getDate(int field)
	{
		return 0;
		//TODO implement getDate
	}

	/**
	 * 
	 * Sets a Date field. The field value is currently limited to <code>END</code>.
	 * This field may be rounded off to the date only from a date time stamp if the
	 * underlying platform implementation only supports date fields with dates only
	 * and not date time stamps.
	 * <P></P>
	 * 
	 * 
	 * @param field - The field to set.
	 * @param value - The value to set the field to, expressed in the same long value format as java.util.Date, which is milliseconds since the epoch (00:00:00 GMT, January 1, 1970).
	 * @throws java.lang.IllegalArgumentException - if field is not one of the the valid RepeatRule fields for this method.
	 */
	public void setDate(int field, long value)
	{
		//TODO implement setDate
	}

	/**
	 * 
	 * Returns a list of fields that currently have values assigned to it. If a field
	 * is not "set", the field is not included in the return value.
	 * <P></P>
	 * 
	 * 
	 * @return an array of fields that have values currently assigned to them. If no fields have values set, an array of zero length is returned.
	 */
	public int[] getFields()
	{
		return this.fields;
	}

	/**
	 * 
	 * Compares this RepeatRule with a given RepeatRule for content equality. For
	 * RepeatRules, dates are considered equal if one or both of the dates compared
	 * contains a date only with no timestamp and the date values are equal regardless
	 * of the time qualifier. This rule accounts for platform dependent rounding off
	 * of dates from date time stamps to dates only. For example, a date value of
	 * 3/14/03 with no time stamp is considered equal to a date value of 3/14/03 with
	 * a time stamp. If the application requires that dates be exactly equal,
	 * comparisons should be made explicitly outside of this method.
	 * <P></P>
	 * 
	 * 
	 * @param obj - another RepeatRule object to compare against
	 * @return true if the contents of the RepeatRules are equivalent, false otherwise.
	 * @see Object#equals(Object)
	 */
	@Override
	public boolean equals(java.lang.Object obj)
	{
		return false;
		//TODO implement equals
	}

}
