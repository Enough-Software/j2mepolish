//#condition polish.android
// generated by de.enough.doc2java.Doc2Java (www.enough.de) on Wed Jan 21 21:07:47 CET 2009
package de.enough.polish.android.media.control;

import de.enough.polish.android.media.Control;

/**
 * 
 * <code>MetaDataControl</code> is used to retrieve metadata information
 * included within the media streams.  A <code>MetaDataControl</code>
 * object recognizes and stores metadata and provides XML-like accessor
 * methods to retrieve this information.
 * <br>
 * Predefined keys are provided to refer to commonly used metadata fields
 * (title, copyright, data, author).
 */
public interface MetaDataControl extends Control
{
	/**
	 * Default key for AUTHOR information.
	 * <p>
	 * Value "author" is assigned to <code>AUTHOR_KEY</code>.
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	java.lang.String AUTHOR_KEY = "author";

	/**
	 * Default key for COPYRIGHT information.
	 * <p>
	 * Value "copyright" is assigned to <code>COPYRIGHT_KEY</code>.
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	java.lang.String COPYRIGHT_KEY = "copyright";

	/**
	 * Default key for DATE information.
	 * <p>
	 * Value "date" is assigned to <code>DATE_KEY</code>.
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	java.lang.String DATE_KEY = "date";

	/**
	 * Default key for TITLE information.
	 * <p>
	 * Value "title" is assigned to <code>TITLE_KEY</code>.
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 * 
	 */
	java.lang.String TITLE_KEY = "title";

	/**
	 * Return the list of keys for the available metadata values.
	 * The returned array must be an array with at least one
	 * key.
	 * <P>
	 * 
	 * 
	 * @return The list of keys for the available metadata values.
	 */
	java.lang.String[] getKeys();

	/**
	 * Retrieve the value found in the metadata associated with the
	 * given key.  Only keys obtained from <code>getKeys</code>
	 * are valid and can be used to retrieve metadata values.
	 * If <code>null</code> or an invalid key is used, an
	 * <code>IllegalArgumentException</code> will be thrown.
	 * <p>
	 * Some keys are valid but the associated metadata may not
	 * be available before a certain portion of the media is
	 * played.  For example, some streaming media types may
	 * contain metadata that's stored at the end of the file.
	 * As a result, the metadata may not be available
	 * until the playback reaches the end of media.  When
	 * that happens, calling <code>getKeyValues</code> with
	 * those keys will return <code>null</code> before the
	 * data is available.  However, when the playback reaches
	 * the end of media, all metadata values must be
	 * made available.
	 * <P>
	 * 
	 * @param key - a key to retrieve the value.
	 * @return the value of the key or null if the given key is valid but the value is not yet available.
	 * @throws java.lang.IllegalArgumentException - Thrown if the given key is null or invalid.
	 */
	java.lang.String getKeyValue(java.lang.String key);

	

}
