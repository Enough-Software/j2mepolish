//#condition polish.android
// generated by de.enough.doc2java.Doc2Java (www.enough.de) on Wed Jan 21 21:07:47 CET 2009
package de.enough.polish.android.media.control;

import de.enough.polish.android.media.Control;

/**
 * 
 * <code>GUIControl</code> extends <code>Control</code> and is defined
 * for controls that provide GUI functionalities.
 * <p>
 * <code>Control</code>s that support a GUI component
 * should implement this interface.
 */
public interface GUIControl extends Control
{
	/**
	 * This defines a mode on how the GUI is displayed.
	 * It is used in conjunction with
	 * <a href="#initDisplayMode(int, java.lang.Object)">
	 * <code>initDisplayMode</code></a>.
	 * <p>
	 * When <code>USE_GUI_PRIMITIVE</code> is specified for
	 * <code>initDisplayMode</code>, a GUI primitive will be
	 * returned.  This object is where the GUI
	 * of this control will be displayed.
	 * It can be used
	 * in conjunction with other GUI objects, and conforms
	 * to the GUI behaviors as specified by
	 * the platform.
	 * <p>
	 * For a given platform, the object returned
	 * must implement or extend from the appropriate GUI primitive
	 * of the platform.  For platforms that support only AWT such as
	 * some CDC implementations, the object must
	 * extend from <code>java.awt.Component</code>; for MIDP
	 * implementations with only LCDUI support, it must extend from
	 * <code>javax.microedition.lcdui.Item</code>.
	 * <p>
	 * In these cases, the <code>arg</code> argument must be
	 * <code>null</code> or a <code>String</code> that specifies
	 * the fully-qualified classname of the GUI primitive.
	 * <p>
	 * On some platforms that support multiple types of GUI primitives,
	 * the <code>arg</code> argument must be used to arbitrate among the
	 * options.  The <code>arg</code> argument must be a
	 * <code>String</code> that specifies the fully-qualified
	 * classname of the GUI primitive to be returned by the method.
	 * <p>
	 * For example, a platform that supports both AWT and LCDUI
	 * must use either <code>"java.awt.Component"</code> or
	 * <code>"javax.microedition.lcdui.Item"</code> as the
	 * <code>arg</code> argument.  The object returned will be
	 * of either type according to what's specified.
	 * <p>
	 * Here are some sample usage scenarios:
	 * <p>
	 * For CDC implementations with only AWT support:
	 * <pre>
	 * <code>
	 * try {
	 * Player p = Manager.createPlayer("http://abc.mpg");
	 * p.realize();
	 * GUIControl gc;
	 * if ((gc = (GUIControl)p.getControl("GUIControl")) != null)
	 * add((Component)gc.initDisplayMode(GUIControl.USE_GUI_PRIMITIVE, null));
	 * p.start();
	 * } catch (MediaException pe) {
	 * } catch (IOException ioe) {
	 * }
	 * </code>
	 * </pre>
	 * <p>
	 * For MIDP implementations with only LCDUI support:
	 * <pre>
	 * <code>
	 * try {
	 * Player p = Manager.createPlayer("http://abc.mpg");
	 * p.realize();
	 * GUIControl gc;
	 * if ((gc = (GUIControl)p.getControl("GUIControl")) != null) {
	 * Form form = new Form("My GUI");
	 * form.append((Item)gc.initDisplayMode(GUIControl.USE_GUI_PRIMITIVE, null));
	 * Display.getDisplay().setCurrent(form);
	 * }
	 * p.start();
	 * } catch (MediaException pe) {
	 * } catch (IOException ioe) {
	 * }
	 * </code>
	 * </pre>
	 * <p>
	 * For implementations with both AWT and LCDUI support:
	 * <pre>
	 * <code>
	 * try {
	 * Player p = Manager.createPlayer("http://abc.mpg");
	 * p.realize();
	 * GUIControl gc;
	 * if ((gc = (GUIControl)p.getControl("GUIControl")) != null)
	 * add((Component)gc.initDisplayMode(GUIControl.USE_GUI_PRIMITIVE,
	 * "java.awt.Component");
	 * p.start();
	 * } catch (MediaException pe) {
	 * } catch (IOException ioe) {
	 * }
	 * </code>
	 * </pre>
	 * <p>
	 * Value 0 is assigned to <code>USE_GUI_PRIMITIVE</code>.
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 * 
	 */
	int USE_GUI_PRIMITIVE = 0;

	/**
	 * Initialize the mode on how the GUI is displayed.
	 * <P>
	 * 
	 * @param mode - The mode that determines how the GUI is displayed.  GUIControl defines only one mode: USE_GUI_PRIMITIVE. Subclasses of this may introduce more modes.
	 * @param arg - The exact semantics of this argument is specified in the respective mode definitions.
	 * @return The exact semantics and type of the object returned are specified in the respective mode definitions.
	 * @throws java.lang.IllegalStateException - Thrown if initDisplayMode is called again after it has previously been called successfully.
	 * @throws java.lang.IllegalArgumentException - Thrown if the mode or arg argument is invalid.   mode must be defined by GUIControl or its subclasses; or a custom mode supported by this implementation. arg must conform to the constraints defined by the respective mode definitions. Refer to the mode definitions for the required type of arg.
	 */
	java.lang.Object initDisplayMode(int mode, java.lang.Object arg);


}
