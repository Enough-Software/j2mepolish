//#condition polish.android
// generated by de.enough.doc2java.Doc2Java (www.enough.de) on Sun Feb 29 19:10:58 CET 2004
package de.enough.polish.android.media.control;

import de.enough.polish.android.media.Control;

/**
 * <code>VolumeControl</code> is an interface for manipulating
 * the audio volume of a <code>Player</code>.
 * 
 * <h3>Volume Settings</h3>
 * This interface allows the output volume to be specified
 * using an integer value that varies between 0 and 100.
 * 
 * <h4>Specifying Volume in the Level Scale</h4>
 * The level scale specifies volume in a linear scale.
 * It ranges from 0 to 100, where 0 represents
 * silence and 100 represents the highest volume.
 * The mapping for
 * producing a linear multiplicative value is
 * implementation dependent.
 * <p>
 * 
 * <h3>Mute</h3>
 * Setting mute on or off doesn't change the volume level
 * returned by getLevel.
 * If mute is <CODE>true</CODE>,
 * no audio signal is produced by this <code>Player</code>; if mute
 * is <CODE>false</CODE>
 * an audio signal is produced and the volume is restored.
 * 
 * <h3>Volume Change Events</h3>
 * When the state of the <code>VolumeControl</code> changes, a
 * <code>VOLUME_CHANGED</code> event is delivered through
 * the <code>PlayerListener</code>.
 * <A HREF="../../../../de/enough/polish/android/media/Player.html"><CODE>Player</CODE></A>,
 * <A HREF="../../../../de/enough/polish/android/media/PlayerListener.html"><CODE>PlayerListener</CODE></A>
 * <HR>
 * 
 */
public interface VolumeControl extends Control
{
	/**
	 * Mute or unmute the <code>Player</code> associated with this
	 * <code>VolumeControl</code>.
	 * 
	 * <p> Calling <code>setMute(true)</code> on the
	 * <code>Player</code> that is already muted is ignored, as is
	 * calling <code>setMute(false)</code> on the <code>Player</code>
	 * that is not currently muted.  Setting mute on or off doesn't
	 * change the volume level returned by getLevel.</p>
	 * 
	 * <p> When <code>setMute</code> results in a change in the muted
	 * state, a <code>VOLUME_CHANGED</code> event will be delivered
	 * through the <code>PlayerListener</code>.</p>
	 * 
	 * @param mute - Specify true to mute the signal, false to unmute the signal.
	 * @see #isMuted()
	 */
	void setMute(boolean mute);

	/**
	 * Get the mute state of the signal associated with this
	 * <code>VolumeControl</code>.
	 * 
	 * @return The mute state.
	 * @see #setMute(boolean)
	 */
	boolean isMuted();

	/**
	 * Set the volume using a linear point scale
	 * with values between 0 and 100.
	 * <br>
	 * 0 is silence; 100 is the loudest
	 * useful level that this <code>VolumeControl</code> supports.
	 * If the given level is less than 0 or greater than 100,
	 * the level will be set to 0 or 100 respectively.
	 * <br>
	 * When <code>setLevel</code> results in a change in
	 * the volume level,
	 * a <code>VOLUME_CHANGED</code> event will be delivered
	 * through the <code>PlayerListener</code>.
	 * 
	 * @param level - The new volume specified in the level scale.
	 * @return The level that was actually set.
	 * @see #getLevel()
	 */
	int setLevel(int level);

	/**
	 * Get the current volume level set.
	 * 
	 * <p> <code>getLevel</code> may return <code>-1</code> if and
	 * only if the <code>Player</code> is in the <i>REALIZED</i> state
	 * (the audio device has not been initialized) and
	 * <code>setLevel</code> has not yet been called.</p>
	 * 
	 * @return The current volume level or -1.
	 * @see #setLevel(int)
	 */
	int getLevel();

}
