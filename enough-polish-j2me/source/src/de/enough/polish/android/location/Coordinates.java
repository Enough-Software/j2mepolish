//#condition polish.android
// generated by de.enough.doc2java.Doc2Java (www.enough.de) on Tue Mar 24 07:57:17 EET 2009
package de.enough.polish.android.location;

/**
 * The <code>Coordinates</code> class represents coordinates as
 * latitude-longitude-altitude values.
 * The latitude and longitude values are expressed
 * in degrees using floating point values. The degrees are
 * in decimal values (rather than minutes/seconds).
 * The coordinates are given using the WGS84 datum.
 * <p>This class also provides convenience methods for converting
 * between a string coordinate representation and the <code>double</code>
 * representation used in this class.
 * </p>
 * 
 */
public class Coordinates extends java.lang.Object
{
	/**
	 * Identifier for string coordinate representation Degrees, Minutes,
	 * Seconds and decimal fractions of a second
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int DD_MM_SS = 1;

	/**
	 * Identifier for string coordinate representation Degrees, Minutes,
	 * decimal fractions of a minute
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 * 
	 */
	public static final int DD_MM = 2;

	//following variables are implicitely defined by getter- or setter-methods:
	protected double latitude;
	protected double longitude;
	protected float altitude;

	/**
	 * Constructs a new <code>Coordinates</code> object with the values
	 * specified. The latitude and longitude parameters are expressed
	 * in degrees using floating point values. The degrees are
	 * in decimal values (rather than minutes/seconds).
	 * <p>
	 * The coordinate values always apply to the WGS84 datum.
	 * </p>
	 * <p>The <code>Float.NaN</code> value can be used for altitude
	 * to indicate that altitude is not known.
	 * </p>
	 * <P>
	 * 
	 * @param latitude - the latitude of the location. Valid range: [-90.0, 90.0]. Positive values indicate northern latitude and negative values southern latitude.
	 * @param longitude - the longitude of the location. Valid range: [-180.0, 180.0). Positive values indicate eastern longitude and negative values western longitude.
	 * @param altitude - the altitude of the location in meters, defined as height above the WGS84 ellipsoid. Float.NaN can be used to indicate that altitude is not known.
	 * @throws java.lang.IllegalArgumentException - if an input parameter is out of the valid range
	 */
	public Coordinates(double latitude, double longitude, float altitude)
	{
		this.latitude = latitude;
		this.longitude = longitude;
		this.altitude = altitude;
	}

	/**
	 * Returns the latitude component of this coordinate.
	 * Positive values indicate northern latitude and
	 * negative values southern latitude.
	 * <p>The latitude is given in WGS84 datum.</p>
	 * <P>
	 * 
	 * 
	 * @return the latitude in degrees
	 * @see #setLatitude(double)
	 */
	public double getLatitude()
	{
		return this.latitude;
	}

	/**
	 * Returns the longitude component of this coordinate.
	 * Positive values indicate eastern longitude and
	 * negative values western longitude.
	 * <p>The longitude is given in WGS84 datum.</p>
	 * <P>
	 * 
	 * 
	 * @return the longitude in degrees
	 * @see #setLongitude(double)
	 */
	public double getLongitude()
	{
		return this.longitude;
	}

	/**
	 * Returns the altitude component of this coordinate. Altitude is defined
	 * to mean height above the WGS84 reference ellipsoid. 0.0 means a location
	 * at the ellipsoid surface, negative values mean the location is below
	 * the ellipsoid surface, <code>Float.NaN</code> that the altitude is not
	 * available.
	 * <P>
	 * 
	 * 
	 * @return the altitude in meters above the reference ellipsoid
	 * @see #setAltitude(float)
	 */
	public float getAltitude()
	{
		return this.altitude;
	}

	/**
	 * Sets the geodetic altitude for this point.
	 * <P>
	 * 
	 * @param altitude - the altitude of the location in meters, defined as height above the WGS84 ellipsoid. 0.0 means a location at the ellipsoid surface, negative values mean the location is below the ellipsoid surface, Float.NaN that the altitude is not available
	 * @see #getAltitude()
	 */
	public void setAltitude(float altitude)
	{
		this.altitude = altitude;
	}

	/**
	 * Sets the geodetic latitude for this point.
	 * 
	 * Latitude is given as a double expressing the latitude in
	 * degrees in the WGS84 datum.
	 * <P>
	 * 
	 * @param latitude - the latitude component of this location in degrees. Valid range: [-90.0, 90.0].
	 * @throws java.lang.IllegalArgumentException - if latitude is out of the valid range
	 * @see #getLatitude()
	 */
	public void setLatitude(double latitude)
	{
		this.latitude = latitude;
	}

	/**
	 * Sets the geodetic longitude for this point.
	 * 
	 * Longitude is given as a double expressing the longitude in degrees
	 * in the WGS84 datum.
	 * <P>
	 * 
	 * @param longitude - the longitude of the location in degrees. Valid range: [-180.0, 180.0)
	 * @throws java.lang.IllegalArgumentException - if longitude is out of the valid range
	 * @see #getLongitude()
	 */
	public void setLongitude(double longitude)
	{
		this.longitude = longitude;
	}

	/**
	 * Converts a String representation of a coordinate into the double
	 * representation as used in this API.
	 * <p>
	 * There are two string syntaxes supported:
	 * </p>
	 * <p>
	 * 1. Degrees, minutes, seconds and decimal fractions of seconds.
	 * This is expressed as a string complying with the
	 * following BNF definition where the degrees are
	 * within the range [-179, 179] and the
	 * minutes and seconds are
	 * within the range [0, 59], or the degrees is -180 and
	 * the minutes, seconds and decimal fractions are 0:<br/>
	 * <pre>
	 * 
	 * coordinate = degrees ":" minutes ":" seconds "." decimalfrac
	 * | degrees ":" minutes ":" seconds
	 * | degrees ":" minutes
	 * degrees = degreedigits | "-" degreedigits
	 * degreedigits = digit | nonzerodigit digit | "1" digit digit
	 * minutes = minsecfirstdigit digit
	 * seconds = minsecfirstdigit digit
	 * decimalfrac = 1*3digit
	 * digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
	 * nonzerodigit = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
	 * minsecfirstdigit = "0" | "1" | "2" | "3" | "4" | "5"
	 * </pre>
	 * </p>
	 * 
	 * <p>
	 * 2. Degrees, minutes and decimal fractions of minutes.
	 * This is expressed as a string complying with the
	 * following BNF definition where the degrees are within the
	 * range [-179, 179] and the minutes are
	 * within the range [0, 59], or the degrees is -180 and the
	 * minutes and decimal fractions are 0:<br/>
	 * <pre>
	 * 
	 * coordinate = degrees ":" minutes "." decimalfrac
	 * | degrees ":" minutes
	 * degrees = degreedigits | "-" degreedigits
	 * degreedigits = digit | nonzerodigit digit | "1" digit digit
	 * minutes = minsecfirstdigit digit
	 * decimalfrac = 1*5digit
	 * digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
	 * nonzerodigit = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
	 * minsecfirstdigit = "0" | "1" | "2" | "3" | "4" | "5"
	 * </pre>
	 * </p>
	 * 
	 * <p>For example, for the <code>double</code> value of the
	 * coordinate <code>61.51d</code>, the corresponding syntax 1
	 * string is <code>"61:30:36"</code> and the corresponding syntax 2
	 * string is <code>"61:30.6"</code>.
	 * </p>
	 * <P>
	 * 
	 * @param coordinate - a String in either of the two representation specified above
	 * @return a double value with decimal degrees that matches the string representation given as the parameter
	 * @throws java.lang.IllegalArgumentException - if the coordinate input parameter does not comply with the defined syntax for the specified types
	 * @throws java.lang.NullPointerException - if the coordinate string is null
	 */
	public static double convert(java.lang.String coordinate)
	{
		return 0;
		//TODO implement convert
	}

	/**
	 * Converts a double representation of a coordinate with decimal degrees
	 * into a string representation.
	 * <p>
	 * There are string syntaxes supported are the same as for
	 * the <code>convert(String)</code> method. The implementation shall
	 * provide as many significant digits for the decimal fractions
	 * as are allowed by the string syntax definition.
	 * </p>
	 * <P>
	 * 
	 * @param coordinate - a double reprentation of a coordinate
	 * @param outputType - identifier of the type of the string representation wanted for output The constant DD_MM_SS identifies the syntax 1 and the constant DD_MM identifies the syntax 2.
	 * @return a string representation of the coordinate in a representation indicated by the parameter
	 * @throws java.lang.IllegalArgumentException - if the outputType is not one of the two costant values defined in this class or if the coordinate value is not within the range [-180.0, 180.0) or is Double.NaN
	 * @see #convert(String)
	 */
	public static java.lang.String convert(double coordinate, int outputType)
	{
		return null;
		//TODO implement convert
	}

	/**
	 * Calculates the azimuth between the two points according
	 * to the ellipsoid model of WGS84. The azimuth
	 * is relative to true north.
	 * The <code>Coordinates</code> object on which this method
	 * is called is considered the origin for the calculation and
	 * the <code>Coordinates</code> object passed as a parameter
	 * is the destination which the azimuth is calculated to.
	 * When the origin is the North pole and the destination is not the
	 * North pole, this method returns 180.0. When the origin is the
	 * South pole and the destination is not the South pole, this
	 * method returns 0.0. If the origin is equal to the destination,
	 * this method returns 0.0.
	 * The implementation shall calculate the result as exactly
	 * as it can. However, it is required that the result is
	 * within 1 degree of the correct result.
	 * <P>
	 * 
	 * @param to - the Coordinates of the destination
	 * @return the azimuth to the destination in degrees. Result is within the range [0.0 ,360.0).
	 * @throws java.lang.NullPointerException - if the parameter is null
	 */
	public float azimuthTo( Coordinates to)
	{
		return 0;
		//TODO implement azimuthTo
	}

	/**
	 * Calculates the geodetic distance between the two points according
	 * to the ellipsoid model of WGS84.
	 * Altitude is neglected from calculations.
	 * <p>The implementation shall calculate this as exactly
	 * as it can. However, it is required that the result is
	 * within <span class="revision">0.36%</span> of the correct result.
	 * </p>
	 * <P>
	 * 
	 * @param to - the Coordinates of the destination
	 * @return the distance to the destination in meters
	 * @throws java.lang.NullPointerException - if the parameter is null
	 */
	public float distance( Coordinates to)
	{
		return 0;
		//TODO implement distance
	}

}
