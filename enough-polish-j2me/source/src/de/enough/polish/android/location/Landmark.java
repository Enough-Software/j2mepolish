//#condition polish.android
// generated by de.enough.doc2java.Doc2Java (www.enough.de) on Tue Mar 24 07:57:17 EET 2009
package de.enough.polish.android.location;

/**
 * The Landmark class represents a landmark, i.
 * 
 * The <code>Landmark</code> class represents a landmark, i.e. a known location
 * with a name. A landmark has
 * a name by which it is known to the end user, a textual description,
 * <code>QualifiedCoordinates</code>
 * and optionally <code>AddressInfo</code>.
 * <p>
 * This class is only a container for the information. The constructor
 * does not validate the parameters passed in but just stores the
 * values, except the name field is never allowed to be <code>null</code>.
 * The get* methods return the values passed in the constructor
 * <span class="revision">or if the values are later modified by calling
 * the set* methods, the get* methods return the modified values.
 * The <code>QualifiedCoordinates</code> object inside the landmark is a
 * mutable object and the <code>Landmark</code> object holds only a reference
 * to it. Therefore, it is possible to modify the
 * <code>QualifiedCoordinates</code> object inside the <code>Landmark</code>
 * object by calling the set* methods in the <code>QualifiedCoordinates</code>
 * object. However, any such dynamic modifications affect only the
 * <code>Landmark</code> object instance, but MUST not automatically update
 * the persistent landmark information in the landmark store. The
 * <code>LandmarkStore.updateLandmark</code> method is the only way
 * to commit the modifications to the persistent landmark store.
 * </span>
 * </p>
 * <p>
 * When the platform implementation returns <code>Landmark</code> objects, it
 * MUST ensure that it only returns objects where the parameters
 * have values set as described for their semantics in this class.
 * </p>
 */
public class Landmark extends java.lang.Object
{
	//following variables are implicitely defined by getter- or setter-methods:
	private java.lang.String name;
	private java.lang.String description;
	private QualifiedCoordinates qualifiedCoordinates;
	private AddressInfo addressInfo;

	/**
	 * Constructs a new <code>Landmark</code> object with the values specified.
	 * <P>
	 * 
	 * @param name - the name of the landmark
	 * @param description - description of the landmark. May be null if not available.
	 * @param coordinates - the Coordinates of the landmark. May be null if not known.
	 * @param addressInfo - the textual address information of the landmark. May be  null if not known.
	 * @throws java.lang.NullPointerException - if the name is null
	 */
	public Landmark(java.lang.String name, java.lang.String description, QualifiedCoordinates coordinates, AddressInfo addressInfo)
	{
		//TODO implement Landmark
	}

	/**
	 * Gets the landmark name.
	 * <P>
	 * 
	 * 
	 * @return the name of the landmark
	 * @see #setName(String)
	 */
	public java.lang.String getName()
	{
		return this.name;
	}

	/**
	 * Gets the landmark description.
	 * <P>
	 * 
	 * 
	 * @return returns the description of the landmark, null if not available
	 * @see #setDescription(String)
	 */
	public java.lang.String getDescription()
	{
		return this.description;
	}

	/**
	 * Gets the <code>QualifiedCoordinates</code> of the landmark.
	 * <P>
	 * 
	 * 
	 * @return the QualifiedCoordinates of the landmark. null if not available.
	 * @see #setQualifiedCoordinates(QualifiedCoordinates)
	 */
	public QualifiedCoordinates getQualifiedCoordinates()
	{
		return this.qualifiedCoordinates;
	}

	/**
	 * Gets the <code>AddressInfo</code> of the landmark.
	 * <P>
	 * 
	 * 
	 * @return the AddressInfo of the landmark
	 * @see #setAddressInfo(AddressInfo)
	 */
	public AddressInfo getAddressInfo()
	{
		return this.addressInfo;
	}

	/**
	 * Sets the name of the landmark.
	 * <P>
	 * 
	 * @param name - name for the landmark
	 * @throws java.lang.NullPointerException - if the parameter is null
	 * @see #getName()
	 */
	public void setName(java.lang.String name)
	{
		this.name = name;
	}

	/**
	 * Sets the description of the landmark.
	 * <P>
	 * 
	 * @param description - description for the landmark, null may be passed in to indicate that description is not available.
	 * @see #getDescription()
	 */
	public void setDescription(java.lang.String description)
	{
		this.description = description;
	}

	/**
	 * Sets the <code>QualifiedCoordinates</code> of the landmark.
	 * <P>
	 * 
	 * @param coordinates - the qualified coordinates of the landmark
	 * @see #getQualifiedCoordinates()
	 */
	public void setQualifiedCoordinates( QualifiedCoordinates coordinates)
	{
		this.qualifiedCoordinates = coordinates;
	}

	/**
	 * Sets the <code>AddressInfo</code> of the landmark.
	 * <P>
	 * 
	 * @param addressInfo - the AddressInfo of the landmark
	 * @see #getAddressInfo()
	 */
	public void setAddressInfo( AddressInfo addressInfo)
	{
		this.addressInfo = addressInfo;
	}

}
