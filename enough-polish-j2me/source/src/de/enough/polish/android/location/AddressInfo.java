//#condition polish.android
// generated by de.enough.doc2java.Doc2Java (www.enough.de) on Tue Mar 24 07:57:16 EET 2009
package de.enough.polish.android.location;

/**
 * The <code>AddressInfo</code> class holds textual address information
 * about a location. Typically the
 * information is e.g. street address. The information is divided into fields
 * (e.g. street, postal code, city, etc.). Defined field constants can be used
 * to retrieve field data.
 * <p>
 * If the value of a field is not available, it is set to <code>null</code>.
 * </p>
 * <p>The names of the fields use terms and definitions that
 * are commonly used e.g. in the United States. Addresses for
 * other countries should map these to the closest corresponding
 * entities used in that country.
 * </p>
 * <p>
 * This class is only a container for the information.
 * The <code>getField</code> method returns the value set for the
 * defined field using the <code>setField</code> method.
 * When the platform implementation returns   <code>AddressInfo</code>
 * objects, it
 * MUST ensure that it only returns objects where the parameters
 * have values set as described for their semantics in this class.
 * </p>
 * 
 * <p>
 * Below are some typical examples of addresses in different countries and how they map to the AddressInfo fields.
 * </p>
 * 
 * <!-- The order of the fields for each category should match the order of the countries
 * in the first row -->
 * <table border="1" cellpadding="5">
 * <tr>
 * <td>AddressInfo Field</td>
 * <td>American Example</td>
 * <td>British Example</td>
 * </tr>
 * 
 * <tr>
 * <td>EXTENSION</td>
 * <td>Flat 5</td>
 * <td>The Oaks</td>
 * </tr>
 * 
 * <tr>	<td>STREET</td>
 * <td>10 Washington Street</td>
 * <td>20 Greenford Court</td>
 * </tr>
 * 
 * <tr>
 * <td>POSTAL_CODE</td>
 * <td>12345</td>
 * <td>AB1 9YZ</td>
 * </tr>
 * 
 * <tr>
 * <td>CITY</td>
 * <td>Palo Alto</td>
 * <td>Cambridge</td>
 * </tr>
 * 
 * <tr>
 * <td>COUNTY</td>
 * <td>Santa Clara County</td>
 * <td>Cambridgeshire</td>
 * </tr>
 * 
 * <tr>
 * <td>STATE</td>
 * <td>California</td>
 * <td>England</td>
 * </tr>
 * 
 * <tr>
 * <td>COUNTRY</td>
 * <td>United States of America</td>
 * <td>United Kingdom</td>
 * </tr>
 * 
 * <tr>
 * <td>COUNTRY_CODE</td>
 * <td>US</td>
 * <td>GB</td>
 * </tr>
 * 
 * <tr>
 * <td>DISTRICT</td>
 * <td></td>
 * <td></td>
 * </tr>
 * <tr>	<td>BUILDING_NAME</td>			<td></td>							<td></td> </tr>
 * <tr>	<td>BUILDING_FLOOR</td>			<td></td>							<td></td> </tr>
 * <tr>	<td>BUILDING_ROOM</td>			<td></td>							<td></td> </tr>
 * <tr>	<td>BUILDING_ZONE</td>			<td></td>							<td></td> </tr>
 * <tr>	<td>CROSSING1</td>				<td></td>							<td></td> </tr>
 * <tr>	<td>CROSSING2</td>				<td></td>							<td></td> </tr>
 * <tr>
 * <td>URL</td>
 * <td>http://www.americanurl.com</td>
 * <td>http://britishurl.co.uk</td>
 * </tr>
 * 
 * <tr>
 * <td>PHONE_NUMBER</td>
 * <td></td>
 * <td></td>
 * </tr>
 * 
 * </table>
 */
public class AddressInfo extends java.lang.Object
{
	/**
	 * Address field denoting address extension, e.g. flat number.
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int EXTENSION = 1;

	/**
	 * Address field denoting street name and number.
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int STREET = 2;

	/**
	 * Address field denoting zip or postal code.
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int POSTAL_CODE = 3;

	/**
	 * Address field denoting town or city name.
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int CITY = 4;

	/**
	 * Address field denoting a county, which is an entity between a state
	 * and a city
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int COUNTY = 5;

	/**
	 * Address field denoting state or province.
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int STATE = 6;

	/**
	 * Address field denoting country.
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int COUNTRY = 7;

	/**
	 * Address field denoting country as a two-letter ISO 3166-1 code.
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int COUNTRY_CODE = 8;

	/**
	 * Address field denoting a municipal district.
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int DISTRICT = 9;

	/**
	 * Address field denoting a building name.
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int BUILDING_NAME = 10;

	/**
	 * Address field denoting a building floor.
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int BUILDING_FLOOR = 11;

	/**
	 * Address field denoting a building room.
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int BUILDING_ROOM = 12;

	/**
	 * Address field denoting a building zone
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int BUILDING_ZONE = 13;

	/**
	 * Address field denoting a street in a crossing.
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int CROSSING1 = 14;

	/**
	 * Address field denoting a street in a crossing.
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int CROSSING2 = 15;

	/**
	 * Address field denoting a URL for this place.
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int URL = 16;

	/**
	 * Address field denoting a phone number for this place.
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 * 
	 */
	public static final int PHONE_NUMBER = 17;

	/**
	 * Constructs an <code>AddressInfo</code> object with all the
	 * values of the fields set to <code>null</code>.
	 * <P>
	 * 
	 * 
	 */
	public AddressInfo()
	{
		//TODO implement AddressInfo
	}

	/**
	 * Returns the value of an address field. If the field is not available
	 * <code>null</code> is returned.
	 * <p>
	 * Example: <code>getField(AddressInfo.STREET)</code> might return
	 * "113 Broadway" if the location is on Broadway, New York, or
	 * <code>null</code> if not available.
	 * <P>
	 * 
	 * @param field - the ID of the field to be retrieved
	 * @return the address field string. If the field is not set, returns null.
	 * @throws java.lang.IllegalArgumentException - if the parameter field ID is not one of the constant values defined in this class
	 * @see #setField(int, java.lang.String)
	 */
	public java.lang.String getField(int field)
	{
		return null;
		//TODO implement getField
	}

	/**
	 * Sets the value of an address field.
	 * <P>
	 * 
	 * @param field - the ID of the field to be set
	 * @param value - the new value for the field. null is used to indicate that the field has no content.
	 * @throws java.lang.IllegalArgumentException - if the parameter field ID is not one of the constant values defined in this class
	 * @see #getField(int)
	 */
	public void setField(int field, java.lang.String value)
	{
		//TODO implement setField
	}

}
