//#condition polish.android

// generated by de.enough.doc2java.Doc2Java (www.enough.de) on Wed Jan 21 22:12:19 CET 2009

package de.enough.polish.android.io.file;


import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.util.Enumeration;
import java.util.Vector;

import android.os.StatFs;

public class FileConnectionImpl 
implements FileConnection
{
    File file;  
    String url;

    DataInputStream dis;
    DataOutputStream dos;
    
    InputStream is;
    OutputStream os;

    
    public FileConnectionImpl(String url, int mode) // TODO wird mode gebraucht ?
    {
        this.url=url;
        String filename = url.substring("file://".length());
        this.file = new File(filename);        
    }

    public long availableSize()
    {
        StatFs statFs=new StatFs(getPath());
        return (statFs.getAvailableBlocks()*statFs.getBlockSize());
    }

    public boolean canRead()
    {                
        return this.file.canRead();
    }

    public boolean canWrite()
    {        
        return this.file.canWrite();
    }

    public void create() throws IOException
    {
    	this.file.createNewFile();        
    }

    public void delete() throws IOException
    {
    	this.file.delete();        
    }

    public long directorySize(boolean includeSubDirs) throws IOException
    {
        // TODO Auto-generated method stub
        return 0;
    }

    public boolean exists()
    {
        return this.file.exists();
    }

    public long fileSize() throws IOException
    {        
        return this.file.length();
    }

    public String getName()
    {
        String name=this.file.getName();
        int l=name.lastIndexOf('/');
        if(l==-1)
            return name;
        name=name.substring(l);
        return name;
    }

    public String getPath()
    {   
        String path=this.file.getPath();
        int i=path.lastIndexOf('/');
        if(i==-1)
            return path;
        path=path.substring(0,i);
        return path;
    }

    public String getURL()
    {
        return this.url;
    }

    public boolean isDirectory()
    {     
        return this.file.isDirectory();
    }

    public boolean isHidden()
    {
        return isHidden();
    }

    public boolean isOpen()
    {
        if(this.dis!=null||this.dos!=null||this.is!=null||this.os!=null)
            return true;
        else
            return false;
    }

    public long lastModified()
    {
        return this.file.lastModified();
    }

    public Enumeration list() throws IOException
    {
        String[] files = this.file.list();        
        Vector v=new Vector(files.length);
        for (int i = 0; i < files.length; i++) {
			v.addElement(files[i]);
		}
        return v.elements();
    }

    public Enumeration list(String filter, boolean includeHidden) throws IOException
    {
     // TODO Auto-generated method stub
        return null;
    }

    public void mkdir() throws IOException
    {
    	this.file.mkdir();        
    }

    public DataInputStream openDataInputStream() throws IOException
    {
        this.dis=new DataInputStream(openInputStream());
        return this.dis;
    }

    public DataOutputStream openDataOutputStream() throws IOException
    {
        this.dos=new DataOutputStream(openOutputStream());
        return this.dos;
    }

    public InputStream openInputStream() throws IOException
    {
        this.is=new FileInputStream(this.file);
        return this.is;
    }

    public OutputStream openOutputStream() throws IOException
    {
        this.os=new FileOutputStream(this.file);
        return this.os;
    }

    public OutputStream openOutputStream(long byteOffset) throws IOException
    {
    	RandomAccessFile raf = new RandomAccessFile(this.file, "rw");
    	raf.seek(byteOffset);
    	this.os = new RandomAccessFileOutputStream(raf);
        return this.os;
    }

    public void rename(String newName) throws IOException
    {
        File newFile=new File(getPath(), newName);        
        this.file.renameTo(newFile);                
    }

    public void setFileConnection(String fileName) throws IOException
    {
        // TODO Auto-generated method stub
        
    }

    public void setHidden(boolean hidden) throws IOException
    {
        // TODO Auto-generated method stub
        
    }

    public void setReadable(boolean readable) throws IOException
    {
        // TODO Auto-generated method stub
        
    }

    public void setWritable(boolean writable) throws IOException
    {
        // TODO Auto-generated method stub
        
    }

    public long totalSize()
    {
        // TODO Auto-generated method stub
        return 0;
    }

    public void truncate(long byteOffset) throws IOException
    {
        // TODO Auto-generated method stub
        
    }

    public long usedSize()
    {
        // TODO Auto-generated method stub
        return 0;
    }

    public void close() throws IOException
    {
        if(this.dos!=null)
        {    
            this.dos.close();
            this.dos=null;
        }
        if(this.dis!=null)
        {    
            this.dis.close();
            this.dis=null;
        }
        if(this.os!=null)
        {    
            this.os.close();           
            this.os=null;
        }
        if(this.is!=null)
        {    
            this.is.close();           
            this.is=null;
        }
    }


}
