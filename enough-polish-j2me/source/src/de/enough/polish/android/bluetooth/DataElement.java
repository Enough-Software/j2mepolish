//#condition polish.javaplatform >= Android/2.0
// generated by de.enough.doc2java.Doc2Java (www.enough.de) on Tue Mar 24 10:34:27 EET 2009
package de.enough.polish.android.bluetooth;

/**
 * 
 * The <code>DataElement</code> class defines the various data
 * types that a Bluetooth service attribute value may have.
 * 
 * The following table describes the data types and valid
 * values that a <code>DataElement</code> object can store.
 * 
 * <TABLE BORDER>
 * <TR><TH>Data Type</TH><TH>Valid Values</TH></TR>
 * <TR><TD><code>NULL</code></TD><TD>represents a
 * <code>null</code> value
 * </TD></TR> <TR><TD><code>U_INT_1</code></TD><TD><code>
 * long </code> value range [0, 255]</TD></TR>
 * <TR><TD><code>U_INT_2</code></TD><TD><code>long</code>
 * value range [0, 2<sup>16</sup>-1]</TD></TR>
 * <TR><TD><code>U_INT_4</code></TD>
 * <TD><code>long</code> value range [0, 2<sup>32</sup>-1]</TD></TR>
 * <TR><TD><code>U_INT_8</code></TD>
 * <TD><code>byte[]</code> value range [0, 2<sup>64</sup>-1]</TD></TR>
 * <TR><TD><code>U_INT_16</code></TD>
 * <TD><code>byte[]</code> value range [0, 2<sup>128</sup>-1]</TD></TR>
 * <TR><TD><code>INT_1</code></TD><TD><code>long</code>
 * value range [-128, 127]</TD></TR>
 * <TR><TD><code>INT_2</code></TD><TD><code>long</code>
 * value range [-2<sup>15</sup>, 2<sup>15</sup>-1]</TD></TR>
 * <TR><TD><code>INT_4</code></TD><TD><code>long</code>
 * value range [-2<sup>31</sup>, 2<sup>31</sup>-1]</TD></TR>
 * <TR><TD><code>INT_8</code></TD><TD><code>long</code>
 * value range [-2<sup>63</sup>, 2<sup>63</sup>-1]</TD></TR>
 * <TR><TD><code>INT_16</code></TD><TD><code>byte[]</code>
 * value range [-2<sup>127</sup>, 2<sup>127</sup>-1]</TD></TR>
 * <TR><TD><code>URL</code></TD>
 * <TD><code>java.lang.String</code></TD></TR>
 * <TR><TD><code>UUID</code></TD>
 * <TD><code>javax.bluetooth.UUID</code></TD></TR>
 * <TR><TD><code>BOOL</code></TD><TD><code>boolean</code></TD></TR>
 * <TR><TD><code>STRING</code></TD>
 * <TD><code>java.lang.String</code></TD></TR>
 * <TR><TD><code>DATSEQ</code></TD>
 * <TD><code>java.util.Enumeration</code></TD></TR>
 * <TR><TD><code>DATALT</code></TD>
 * <TD><code>java.util.Enumeration</code></TD></TR>
 * </TABLE>
 * 
 * <DD>1.4</DD>
 * <HR>
 * 
 * <!-- =========== FIELD SUMMARY =========== -->
 * 
 * <A NAME="field_summary"><!-- --></A>
 * <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
 * <B>Field Summary</B></FONT></TH>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>static&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#BOOL" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#BOOL">BOOL</A></B></CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines data of type BOOL.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>static&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#DATALT" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#DATALT">DATALT</A></B></CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines data of type DATALT.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>static&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#DATSEQ" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#DATSEQ">DATSEQ</A></B></CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines data of type DATSEQ.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>static&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#INT_1" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#INT_1">INT_1</A></B></CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines a signed integer of size one byte.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>static&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#INT_16" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#INT_16">INT_16</A></B></CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines a signed integer of size sixteen bytes.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>static&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#INT_2" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#INT_2">INT_2</A></B></CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines a signed integer of size two bytes.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>static&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#INT_4" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#INT_4">INT_4</A></B></CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines a signed integer of size four bytes.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>static&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#INT_8" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#INT_8">INT_8</A></B></CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines a signed integer of size eight bytes.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>static&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#NULL" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#NULL">NULL</A></B></CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines data of type NULL.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>static&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#STRING" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#STRING">STRING</A></B></CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines data of type STRING.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>static&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#U_INT_1" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#U_INT_1">U_INT_1</A></B></CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines an unsigned integer of size one byte.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>static&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#U_INT_16" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#U_INT_16">U_INT_16</A></B></CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines an unsigned integer of size sixteen bytes.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>static&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#U_INT_2" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#U_INT_2">U_INT_2</A></B></CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines an unsigned integer of size two bytes.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>static&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#U_INT_4" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#U_INT_4">U_INT_4</A></B></CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines an unsigned integer of size four bytes.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>static&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#U_INT_8" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#U_INT_8">U_INT_8</A></B></CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines an unsigned integer of size eight bytes.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>static&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#URL" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#URL">URL</A></B></CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines data of type URL.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>static&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#UUID" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#UUID">UUID</A></B></CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines data of type UUID.</TD>
 * </TR>
 * </TABLE>
 * &nbsp;
 * <!-- ======== CONSTRUCTOR SUMMARY ======== -->
 * 
 * <A NAME="constructor_summary"><!-- --></A>
 * <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
 * <B>Constructor Summary</B></FONT></TH>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD><CODE><B><A HREF="DataElement.html#DataElement(boolean)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#DataElement(boolean)">DataElement</A></B>(boolean&nbsp;bool)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a <code>DataElement</code> whose data type is
 * <code>BOOL</code> and whose value is equal to <code>bool</code>.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD><CODE><B><A HREF="DataElement.html#DataElement(int)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#DataElement(int)">DataElement</A></B>(int&nbsp;valueType)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a <code>DataElement</code> of type <code>NULL</code>,
 * <code>DATALT</code>, or <code>DATSEQ</code>.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD><CODE><B><A HREF="DataElement.html#DataElement(int, long)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#DataElement(int, long)">DataElement</A></B>(int&nbsp;valueType,
 * long&nbsp;value)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a <code>DataElement</code> that encapsulates an integer
 * value of size <code>U_INT_1</code>, <code>U_INT_2</code>,
 * <code>U_INT_4</code>, <code>INT_1</code>, <code>INT_2</code>,
 * <code>INT_4</code>, and <code>INT_8</code>.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD><CODE><B><A HREF="DataElement.html#DataElement(int, java.lang.Object)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#DataElement(int, java.lang.Object)">DataElement</A></B>(int&nbsp;valueType,
 * java.lang.Object&nbsp;value)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a <code>DataElement</code> whose data type is given by
 * <code>valueType</code> and whose value is specified by the argument
 * <code>value</code>.</TD>
 * </TR>
 * </TABLE>
 * &nbsp;
 * <!-- ========== METHOD SUMMARY =========== -->
 * 
 * <A NAME="method_summary"><!-- --></A>
 * <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
 * <B>Method Summary</B></FONT></TH>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;void</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#addElement(javax.bluetooth.DataElement)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#addElement(javax.bluetooth.DataElement)">addElement</A></B>(<A HREF="DataElement.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html" title="class in javax.bluetooth">DataElement</A>&nbsp;elem)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds a <code>DataElement</code> to this <code>DATALT</code>
 * or <code>DATSEQ</code> <code>DataElement</code> object.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;boolean</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#getBoolean()" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#getBoolean()">getBoolean</A></B>()</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the value of the <code>DataElement</code> if it is represented as
 * a <code>boolean</code>.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#getDataType()" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#getDataType()">getDataType</A></B>()</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the data type of the object this <code>DataElement</code>
 * represents.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;long</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#getLong()" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#getLong()">getLong</A></B>()</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the value of the <code>DataElement</code> if it can be
 * represented as a <code>long</code>.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#getSize()" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#getSize()">getSize</A></B>()</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the number of <code>DataElements</code> that are present
 * in this <code>DATALT</code> or <code>DATSEQ</code> object.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;java.lang.Object</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#getValue()" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#getValue()">getValue</A></B>()</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the value of this <code>DataElement</code> as an
 * <code>Object</code>.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;void</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#insertElementAt(javax.bluetooth.DataElement, int)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#insertElementAt(javax.bluetooth.DataElement, int)">insertElementAt</A></B>(<A HREF="DataElement.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html" title="class in javax.bluetooth">DataElement</A>&nbsp;elem,
 * int&nbsp;index)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Inserts a <code>DataElement</code> at the specified location.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;boolean</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="DataElement.html#removeElement(javax.bluetooth.DataElement)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#removeElement(javax.bluetooth.DataElement)">removeElement</A></B>(<A HREF="DataElement.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html" title="class in javax.bluetooth">DataElement</A>&nbsp;elem)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes the first occurrence of the <code>DataElement</code>
 * from this object.</TD>
 * </TR>
 * </TABLE>
 * &nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
 * <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 * <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
 * <TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
 * </TR>
 * </TABLE>
 * &nbsp;
 * 
 * <!-- ============ FIELD DETAIL =========== -->
 * 
 * <A NAME="field_detail"><!-- --></A>
 * <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
 * <B>Field Detail</B></FONT></TH>
 * </TR>
 * </TABLE>
 * 
 * <A NAME="NULL"><!-- --></A><H3>
 * NULL</H3>
 * <PRE>
 * public static final int <B>NULL</B></PRE>
 * <DD>Defines data of type NULL.
 * 
 * The value for data type <code>DataElement.NULL</code> is
 * implicit, i.e., there is no representation of it.
 * Accordingly there is no method to retrieve
 * it, and attempts to retrieve the value will throw an exception.
 * The value of <code>NULL</code> is 0x00 (0).
 * <HR>
 * 
 * <A NAME="U_INT_1"><!-- --></A><H3>
 * U_INT_1</H3>
 * <PRE>
 * public static final int <B>U_INT_1</B></PRE>
 * <DD>Defines an unsigned integer of size one byte.
 * The value of the constant <code>U_INT_1</code>
 * is 0x08 (8).
 * <HR>
 * 
 * <A NAME="U_INT_2"><!-- --></A><H3>
 * U_INT_2</H3>
 * <PRE>
 * public static final int <B>U_INT_2</B></PRE>
 * <DD>Defines an unsigned integer of size two bytes.
 * The value of the constant <code>U_INT_2</code> is 0x09 (9).
 * <HR>
 * 
 * <A NAME="U_INT_4"><!-- --></A><H3>
 * U_INT_4</H3>
 * <PRE>
 * public static final int <B>U_INT_4</B></PRE>
 * <DD>Defines an unsigned integer of size four bytes.
 * The value of the constant <code>U_INT_4</code> is 0x0A (10).
 * <HR>
 * 
 * <A NAME="U_INT_8"><!-- --></A><H3>
 * U_INT_8</H3>
 * <PRE>
 * public static final int <B>U_INT_8</B></PRE>
 * <DD>Defines an unsigned integer of size eight bytes.
 * The value of the constant <code>U_INT_8</code> is 0x0B (11).
 * <HR>
 * 
 * <A NAME="U_INT_16"><!-- --></A><H3>
 * U_INT_16</H3>
 * <PRE>
 * public static final int <B>U_INT_16</B></PRE>
 * <DD>Defines an unsigned integer of size sixteen bytes.
 * The value of the constant <code>U_INT_16</code> is 0x0C (12).
 * <HR>
 * 
 * <A NAME="INT_1"><!-- --></A><H3>
 * INT_1</H3>
 * <PRE>
 * public static final int <B>INT_1</B></PRE>
 * <DD>Defines a signed integer of size one byte.
 * The value of the constant <code>INT_1</code> is 0x10 (16).
 * <HR>
 * 
 * <A NAME="INT_2"><!-- --></A><H3>
 * INT_2</H3>
 * <PRE>
 * public static final int <B>INT_2</B></PRE>
 * <DD>Defines a signed integer of size two bytes.
 * The value of the constant <code>INT_2</code> is 0x11 (17).
 * <HR>
 * 
 * <A NAME="INT_4"><!-- --></A><H3>
 * INT_4</H3>
 * <PRE>
 * public static final int <B>INT_4</B></PRE>
 * <DD>Defines a signed integer of size four bytes.
 * The value of the constant <code>INT_4</code> is 0x12 (18).
 * <HR>
 * 
 * <A NAME="INT_8"><!-- --></A><H3>
 * INT_8</H3>
 * <PRE>
 * public static final int <B>INT_8</B></PRE>
 * <DD>Defines a signed integer of size eight bytes.
 * The value of the constant <code>INT_8</code> is 0x13 (19).
 * <HR>
 * 
 * <A NAME="INT_16"><!-- --></A><H3>
 * INT_16</H3>
 * <PRE>
 * public static final int <B>INT_16</B></PRE>
 * <DD>Defines a signed integer of size sixteen bytes.
 * The value of the constant <code>INT_16</code> is 0x14 (20).
 * <HR>
 * 
 * <A NAME="URL"><!-- --></A><H3>
 * URL</H3>
 * <PRE>
 * public static final int <B>URL</B></PRE>
 * <DD>Defines data of type URL.
 * The value of the constant <code>URL</code> is 0x40 (64).
 * <HR>
 * 
 * <A NAME="UUID"><!-- --></A><H3>
 * UUID</H3>
 * <PRE>
 * public static final int <B>UUID</B></PRE>
 * <DD>Defines data of type UUID.
 * The value of the constant <code>UUID</code> is 0x18 (24).
 * <HR>
 * 
 * <A NAME="BOOL"><!-- --></A><H3>
 * BOOL</H3>
 * <PRE>
 * public static final int <B>BOOL</B></PRE>
 * <DD>Defines data of type BOOL.
 * The value of the constant <code>BOOL</code> is 0x28 (40).
 * <HR>
 * 
 * <A NAME="STRING"><!-- --></A><H3>
 * STRING</H3>
 * <PRE>
 * public static final int <B>STRING</B></PRE>
 * <DD>Defines data of type STRING.
 * The value of the constant <code>STRING</code> is 0x20 (32).
 * <HR>
 * 
 * <A NAME="DATSEQ"><!-- --></A><H3>
 * DATSEQ</H3>
 * <PRE>
 * public static final int <B>DATSEQ</B></PRE>
 * <DD>Defines data of type DATSEQ.  The service attribute value whose
 * data has this type must consider all the elements of the list,
 * i.e. the value is the whole set and not a subset. The elements
 * of the set can be of any type defined in this class, including
 * DATSEQ.
 * The value of the constant <code>DATSEQ</code> is 0x30 (48).
 * <HR>
 * 
 * <A NAME="DATALT"><!-- --></A><H3>
 * DATALT</H3>
 * <PRE>
 * public static final int <B>DATALT</B></PRE>
 * <DD>Defines data of type DATALT.  The service attribute value whose
 * data has this type must consider only one of the elements of the
 * set, i.e., the value is the not the whole set but only one
 * element of the set. The user is free to choose any one element.
 * The elements of the set can be of any type defined in this class,
 * including DATALT.
 * The value of the constant <code>DATALT</code> is 0x38 (56).
 * 
 * <!-- ========= CONSTRUCTOR DETAIL ======== -->
 * 
 * <A NAME="constructor_detail"><!-- --></A>
 * <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
 * <B>Constructor Detail</B></FONT></TH>
 * </TR>
 * </TABLE>
 * 
 * <A NAME="DataElement(int)"><!-- --></A><H3>
 * DataElement</H3>
 * <PRE>
 * public <B>DataElement</B>(int&nbsp;valueType)</PRE>
 * <DD>Creates a <code>DataElement</code> of type <code>NULL</code>,
 * <code>DATALT</code>, or <code>DATSEQ</code>.
 * <code>NULL</code>, <code>DATALT</code>, or <code>DATSEQ</code>
 * <DD><CODE>java.lang.IllegalArgumentException</CODE> - if <code>valueType</code>
 * is not <code>NULL</code>, <code>DATALT</code>, or
 * <code>DATSEQ</code><DT><B>See Also:</B><DD><A HREF="DataElement.html#NULL" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#NULL"><CODE>NULL</CODE></A>,
 * <A HREF="DataElement.html#DATALT" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#DATALT"><CODE>DATALT</CODE></A>,
 * <A HREF="DataElement.html#DATSEQ" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#DATSEQ"><CODE>DATSEQ</CODE></A></DL>
 * <HR>
 * 
 * <A NAME="DataElement(boolean)"><!-- --></A><H3>
 * DataElement</H3>
 * <PRE>
 * public <B>DataElement</B>(boolean&nbsp;bool)</PRE>
 * <DD>Creates a <code>DataElement</code> whose data type is
 * <code>BOOL</code> and whose value is equal to <code>bool</code>.
 * BOOL.<DT><B>See Also:</B><DD><A HREF="DataElement.html#BOOL" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#BOOL"><CODE>BOOL</CODE></A></DL>
 * <HR>
 * 
 * <A NAME="DataElement(int, long)"><!-- --></A><H3>
 * DataElement</H3>
 * <PRE>
 * public <B>DataElement</B>(int&nbsp;valueType,
 * long&nbsp;value)</PRE>
 * <DD>Creates a <code>DataElement</code> that encapsulates an integer
 * value of size <code>U_INT_1</code>, <code>U_INT_2</code>,
 * <code>U_INT_4</code>, <code>INT_1</code>, <code>INT_2</code>,
 * <code>INT_4</code>, and <code>INT_8</code>.
 * The legal values for the <code>valueType</code> and the corresponding
 * attribute values are:
 * <TABLE>
 * <TR><TH>Value Type</TH><TH>Value Range</TH></TR>
 * <TR><TD><code>U_INT_1</code></TD>
 * <TD>[0, 2<sup>8</sup>-1]</TD></TR>
 * <TR><TD><code>U_INT_2</code></TD>
 * <TD>[0, 2<sup>16</sup>-1]</TD></TR>
 * <TR><TD><code>U_INT_4</code></TD>
 * <TD>[0, 2<sup>32</sup>-1]</TD></TR>
 * <TR><TD><code>INT_1</code></TD>
 * <TD>[-2<sup>7</sup>, 2<sup>7</sup>-1]</TD></TR>
 * <TR><TD><code>INT_2</code></TD>
 * <TD>[-2<sup>15</sup>, 2<sup>15</sup>-1]</TD></TR>
 * <TR><TD><code>INT_4</code></TD>
 * <TD>[-2<sup>31</sup>, 2<sup>31</sup>-1]</TD></TR>
 * <TR><TD><code>INT_8</code></TD>
 * <TD>[-2<sup>63</sup>, 2<sup>63</sup>-1]</TD></TR>
 * </TABLE>
 * All other pairings are illegal and will cause an
 * <code>IllegalArgumentException</code> to be thrown.
 * created; must be one of the following:
 * <code>U_INT_1</code>,
 * <code>U_INT_2</code>,
 * <code>U_INT_4</code>,
 * <code>INT_1</code>,
 * <code>INT_2</code>,
 * <code>INT_4</code>, or
 * <code>INT_8</code><DD><CODE>value</CODE> - the value of the object being created; must be
 * in the range specified for the given <code>valueType</code>
 * <DD><CODE>java.lang.IllegalArgumentException</CODE> - if the <code>valueType</code>
 * is not valid or the <code>value</code> for the given legal
 * <code>valueType</code> is outside the valid range<DT><B>See Also:</B><DD><A HREF="DataElement.html#U_INT_1" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#U_INT_1"><CODE>U_INT_1</CODE></A>,
 * <A HREF="DataElement.html#U_INT_2" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#U_INT_2"><CODE>U_INT_2</CODE></A>,
 * <A HREF="DataElement.html#U_INT_4" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#U_INT_4"><CODE>U_INT_4</CODE></A>,
 * <A HREF="DataElement.html#INT_1" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#INT_1"><CODE>INT_1</CODE></A>,
 * <A HREF="DataElement.html#INT_2" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#INT_2"><CODE>INT_2</CODE></A>,
 * <A HREF="DataElement.html#INT_4" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#INT_4"><CODE>INT_4</CODE></A>,
 * <A HREF="DataElement.html#INT_8" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#INT_8"><CODE>INT_8</CODE></A></DL>
 * <HR>
 * 
 * <A NAME="DataElement(int, java.lang.Object)"><!-- --></A><H3>
 * DataElement</H3>
 * <PRE>
 * public <B>DataElement</B>(int&nbsp;valueType,
 * java.lang.Object&nbsp;value)</PRE>
 * <DD>Creates a <code>DataElement</code> whose data type is given by
 * <code>valueType</code> and whose value is specified by the argument
 * <code>value</code>. The legal values for the <code>valueType</code>
 * and the corresponding attribute values are:
 * <TABLE>
 * <TR><TH>Value Type</TH><TH>Java Type / Value Range</TH></TR>
 * <TR><TD><code>URL</code></TD><TD><code>java.lang.String</code>
 * </TD></TR>
 * <TR><TD><code>UUID</code></TD>
 * <TD><code>javax.bluetooth.UUID</code></TD></TR>
 * <TR><TD><code>STRING</code></TD>
 * <TD><code>java.lang.String</code></TD></TR>
 * <TR><TD><code>INT_16</code></TD>
 * <TD>[-2<sup>127</sup>, 2<sup>127</sup>-1] as a byte array
 * whose length must be 16</TD></TR>
 * <TR><TD><code>U_INT_8</code></TD>
 * <TD>[0, 2<sup>64</sup>-1] as a byte array whose length must
 * be 8</TD></TR>
 * <TR><TD><code>U_INT_16</code></TD>
 * <TD>[0, 2<sup>128</sup>-1] as a byte array whose length must
 * be 16</TD></TR>
 * </TABLE>
 * All other pairings are illegal and would cause an
 * <code>IllegalArgumentException</code> exception.
 * created; must be one of the following: <code>URL</code>,
 * <code>UUID</code>,
 * <code>STRING</code>,
 * <code>INT_16</code>,
 * <code>U_INT_8</code>, or
 * <code>U_INT_16</code><DD><CODE>value</CODE> - the value for the <code>DataElement</code> being created
 * of type <code>valueType</code>
 * <DD><CODE>java.lang.IllegalArgumentException</CODE> - if the <code>value</code>
 * is not of the <code>valueType</code> type or is not in the range
 * specified or is <code>null</code><DT><B>See Also:</B><DD><A HREF="DataElement.html#URL" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#URL"><CODE>URL</CODE></A>,
 * <A HREF="DataElement.html#UUID" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#UUID"><CODE>UUID</CODE></A>,
 * <A HREF="DataElement.html#STRING" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#STRING"><CODE>STRING</CODE></A>,
 * <A HREF="DataElement.html#U_INT_8" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#U_INT_8"><CODE>U_INT_8</CODE></A>,
 * <A HREF="DataElement.html#INT_16" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#INT_16"><CODE>INT_16</CODE></A>,
 * <A HREF="DataElement.html#U_INT_16" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html#U_INT_16"><CODE>U_INT_16</CODE></A></DL>
 * 
 * <!-- ============ METHOD DETAIL ========== -->
 * 
 * <A NAME="method_detail"><!-- --></A>
 * <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
 * <B>Method Detail</B></FONT></TH>
 * </TR>
 * </TABLE>
 * 
 * <A NAME="addElement(javax.bluetooth.DataElement)"><!-- --></A><H3>
 * addElement</H3>
 * <PRE>
 * public void <B>addElement</B>(<A HREF="DataElement.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html" title="class in javax.bluetooth">DataElement</A>&nbsp;elem)</PRE>
 * <DD>Adds a <code>DataElement</code> to this <code>DATALT</code>
 * or <code>DATSEQ</code> <code>DataElement</code> object.
 * The <code>elem</code> will be added at the end of the list.
 * The <code>elem</code> can be of any
 * <code>DataElement</code> type, i.e., <code>URL</code>,
 * <code>NULL</code>, <code>BOOL</code>, <code>UUID</code>,
 * <code>STRING</code>, <code>DATSEQ</code>, <code>DATALT</code>,
 * and the various signed and unsigned integer types.
 * The same object may be added twice. If the object is
 * successfully added the size of the <code>DataElement</code> is
 * increased by one.
 * <DD><CODE>java.lang.ClassCastException</CODE> - if the method is invoked on a
 * <code>DataElement</code> whose type is not <code>DATALT</code>
 * or <code>DATSEQ</code>
 * <DD><CODE>java.lang.NullPointerException</CODE> - if <code>elem</code> is
 * <code>null</code></DL>
 * <HR>
 * 
 * <A NAME="insertElementAt(javax.bluetooth.DataElement, int)"><!-- --></A><H3>
 * insertElementAt</H3>
 * <PRE>
 * public void <B>insertElementAt</B>(<A HREF="DataElement.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html" title="class in javax.bluetooth">DataElement</A>&nbsp;elem,
 * int&nbsp;index)</PRE>
 * <DD>Inserts a <code>DataElement</code> at the specified location.
 * This method can be invoked only on a <code>DATALT</code> or
 * <code>DATSEQ</code> <code>DataElement</code>.
 * <code>elem</code> can be of any <code>DataElement</code>
 * type, i.e., <code>URL</code>,  <code>NULL</code>,
 * <code>BOOL</code>,
 * <code>UUID</code>, <code>STRING</code>, <code>DATSEQ</code>,
 * <code>DATALT</code>, and the various signed and unsigned
 * integers. The same object may be added twice. If the object is
 * successfully added the size will be increased by one.
 * Each element with an index greater than or equal to the specified
 * index is shifted upward to have an index one
 * greater than the value it had previously.
 * The <code>index</code> must be greater than or equal to 0 and
 * less than or equal to the current size.  Therefore,
 * <code>DATALT</code> and
 * <code>DATSEQ</code> are zero-based objects.
 * <code>DataElement</code>
 * <DD><CODE>java.lang.ClassCastException</CODE> - if the method is invoked on an
 * instance of <code>DataElement</code> whose type is not
 * <code>DATALT</code> or <code>DATSEQ</code>
 * <DD><CODE>java.lang.IndexOutOfBoundsException</CODE> - if <code>index</code>
 * is negative or greater than
 * the size of the <code>DATALT</code> or <code>DATSEQ</code>
 * <DD><CODE>java.lang.NullPointerException</CODE> - if <code>elem</code> is
 * <code>null</code></DL>
 * <HR>
 * 
 * <A NAME="getSize()"><!-- --></A><H3>
 * getSize</H3>
 * <PRE>
 * public int <B>getSize</B>()</PRE>
 * <DD>Returns the number of <code>DataElements</code> that are present
 * in this <code>DATALT</code> or <code>DATSEQ</code> object.
 * It is possible that the number of elements is equal to zero.
 * 
 * or <code>DATSEQ</code>
 * <DD><CODE>java.lang.ClassCastException</CODE> - if this object is not of type
 * <code>DATALT</code> or <code>DATSEQ</code></DL>
 * <HR>
 * 
 * <A NAME="removeElement(javax.bluetooth.DataElement)"><!-- --></A><H3>
 * removeElement</H3>
 * <PRE>
 * public boolean <B>removeElement</B>(<A HREF="DataElement.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html" title="class in javax.bluetooth">DataElement</A>&nbsp;elem)</PRE>
 * <DD>Removes the first occurrence of the <code>DataElement</code>
 * from this object.  <code>elem</code> may be of any type, i.e.,
 * <code>URL</code>,  <code>NULL</code>, <code>BOOL</code>,
 * <code>UUID</code>,  <code>STRING</code>, <code>DATSEQ</code>,
 * <code>DATALT</code>, or the variously sized signed and unsigned
 * integers.
 * Only the first object in the list that is equal to
 * <code>elem</code> will be removed. Other objects, if present,
 * are not removed.  Since this class doesn?t override the
 * <code>equals()</code> method of the <code>Object</code> class,
 * the remove method compares only the
 * references of objects. If <code>elem</code> is
 * successfully removed the size of this <code>DataElement</code>
 * is decreased by one.  Each <code>DataElement</code> in the
 * <code>DATALT</code> or <code>DATSEQ</code> with an index greater
 * than the index of <code>elem</code> is shifted downward to have
 * an index one smaller than the value it had previously.
 * removed; else <code>false</code>
 * <DD><CODE>java.lang.ClassCastException</CODE> - if this object is not of
 * type <code>DATALT</code> or <code>DATSEQ</code>
 * <DD><CODE>java.lang.NullPointerException</CODE> - if <code>elem</code> is
 * <code>null</code></DL>
 * <HR>
 * 
 * <A NAME="getDataType()"><!-- --></A><H3>
 * getDataType</H3>
 * <PRE>
 * public int <B>getDataType</B>()</PRE>
 * <DD>Returns the data type of the object this <code>DataElement</code>
 * represents.
 * 
 * return values are:
 * <code>URL</code>,
 * <code>NULL</code>,
 * <code>BOOL</code>,
 * <code>UUID</code>,
 * <code>STRING</code>,
 * <code>DATSEQ</code>,
 * <code>DATALT</code>,
 * <code>U_INT_1</code>,
 * <code>U_INT_2</code>,
 * <code>U_INT_4</code>,
 * <code>U_INT_8</code>,
 * <code>U_INT_16</code>,
 * <code>INT_1</code>,
 * <code>INT_2</code>,
 * <code>INT_4</code>,
 * <code>INT_8</code>, or
 * <code>INT_16</code></DL>
 * <HR>
 * 
 * <A NAME="getLong()"><!-- --></A><H3>
 * getLong</H3>
 * <PRE>
 * public long <B>getLong</B>()</PRE>
 * <DD>Returns the value of the <code>DataElement</code> if it can be
 * represented as a <code>long</code>. The data type of the object must be
 * <code>U_INT_1</code>,
 * <code>U_INT_2</code>,
 * <code>U_INT_4</code>,
 * <code>INT_1</code>,
 * <code>INT_2</code>,
 * <code>INT_4</code>, or
 * <code>INT_8</code>.
 * 
 * <DD><CODE>java.lang.ClassCastException</CODE> - if the data type of the object is not
 * <code>U_INT_1</code>,
 * <code>U_INT_2</code>,
 * <code>U_INT_4</code>,
 * <code>INT_1</code>,
 * <code>INT_2</code>,
 * <code>INT_4</code>,
 * or <code>INT_8</code></DL>
 * <HR>
 * 
 * <A NAME="getBoolean()"><!-- --></A><H3>
 * getBoolean</H3>
 * <PRE>
 * public boolean <B>getBoolean</B>()</PRE>
 * <DD>Returns the value of the <code>DataElement</code> if it is represented as
 * a <code>boolean</code>.
 * 
 * object
 * <DD><CODE>java.lang.ClassCastException</CODE> - if the data type of this object is
 * not of type <code>BOOL</code></DL>
 * <HR>
 * 
 * <A NAME="getValue()"><!-- --></A><H3>
 * getValue</H3>
 * <PRE>
 * public java.lang.Object <B>getValue</B>()</PRE>
 * <DD>Returns the value of this <code>DataElement</code> as an
 * <code>Object</code>. This method returns the appropriate Java
 * object for the following data types:
 * <code>URL</code>,
 * <code>UUID</code>,
 * <code>STRING</code>,
 * <code>DATSEQ</code>,
 * <code>DATALT</code>,
 * <code>U_INT_8</code>,
 * <code>U_INT_16</code>, and
 * <code>INT_16</code>.
 * Modifying the returned <code>Object</code> will not change this
 * <code>DataElement</code>.
 * 
 * The following are the legal pairs of data type
 * and Java object type being returned.
 * <TABLE>
 * <TR><TH><code>DataElement Data Type</code></TH>
 * <TH>Java Data Type</TH></TR>
 * <TR><TD><code>URL</code></TD><TD><code>java.lang.String</code>
 * </TD></TR>
 * <TR><TD><code>UUID</code></TD>
 * <TD><code>javax.bluetooth.UUID</code></TD></TR>
 * <TR><TD><code>STRING</code></TD><TD><code>java.lang.String
 * </code></TD></TR>
 * <TR><TD><code>DATSEQ</code></TD>
 * <TD><code>java.util.Enumeration</code></TD></TR>
 * <TR><TD><code>DATALT</code></TD>
 * <TD><code>java.util.Enumeration</code></TD></TR>
 * <TR><TD><code>U_INT_8</code></TD>
 * <TD>byte[] of length 8</TD></TR>
 * <TR><TD><code>U_INT_16</code></TD>
 * <TD>byte[] of length 16</TD></TR>
 * <TR><TD><code>INT_16</code></TD>
 * <TD>byte[] of length 16</TD></TR>
 * </TABLE>
 * 
 * <DD><CODE>java.lang.ClassCastException</CODE> - if the object is not a
 * <code>URL</code>, <code>UUID</code>,
 * <code>STRING</code>, <code>DATSEQ</code>, <code>DATALT</code>,
 * <code>U_INT_8</code>,
 * <code>U_INT_16</code>,
 * or <code>INT_16</code></DL>
 * <!-- ========= END OF CLASS DATA ========= -->
 * <HR>
 * 
 * 
 * <!-- ======= START OF BOTTOM NAVBAR ====== -->
 * <A NAME="navbar_bottom"><!-- --></A>
 * <A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
 * <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
 * <TR>
 * <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
 * <A NAME="navbar_bottom_firstrow"><!-- --></A>
 * <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
 * <TR ALIGN="center" VALIGN="top">
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../overview-summary.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
 * <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../deprecated-list.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../index-all.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../help-doc.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
 * </TR>
 * </TABLE>
 * </TD>
 * <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
 * <b>JSR 82</b></EM>
 * </TD>
 * </TR>
 * 
 * <TR>
 * <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
 * &nbsp;<A HREF="BluetoothStateException.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/BluetoothStateException.html" title="class in javax.bluetooth"><B>PREV CLASS</B></A>&nbsp;
 * &nbsp;<A HREF="DeviceClass.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DeviceClass.html" title="class in javax.bluetooth"><B>NEXT CLASS</B></A></FONT></TD>
 * <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
 * <A HREF="../../index.html-javax-bluetooth-DataElement.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/index.html?javax/bluetooth/DataElement.html" target="_top"><B>FRAMES</B></A>  &nbsp;
 * &nbsp;<A HREF="DataElement.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/bluetooth/DataElement.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
 * &nbsp;<SCRIPT type="text/javascript">
 * <!--
 * if(window==top) {
 * document.writeln('<A HREF="../../allclasses-noframe.html"tpa=http://java.sun.com/javame/reference/apis/jsr082/allclasses-noframe.html><B>All Classes</B></A>');
 * }
 * //-->
 * </SCRIPT>
 * <NOSCRIPT>
 * <A HREF="../../allclasses-noframe.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/allclasses-noframe.html"><B>All Classes</B></A>
 * </NOSCRIPT>
 * 
 * 
 * </FONT></TD>
 * </TR>
 * <TR>
 * <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
 * SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
 * <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
 * DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
 * </TR>
 * </TABLE>
 * <A NAME="skip-navbar_bottom"></A>
 * <!-- ======== END OF BOTTOM NAVBAR ======= -->
 * 
 * <HR>
 * <small>Copyright (c) 2006 Sun Microsystems, Inc. All rights reserved. <b>Use is subject to <a href="http://java.sun.com/javame/reference/apis/license.html" target="_top">License Terms</a>.</b> Your use of this web site or any of its content or software indicates your agreement to be bound by these License Terms.<br><br>For more information, please consult the <a href="http://jcp.org/en/jsr/detail?id=82" target="_top">JSR 82 specification.</a></small>
 * </BODY>
 * <script language="JavaScript" src="../../../../../../js/omi/jsc/s_code_remote.js" tppabs="http://java.sun.com/js/omi/jsc/s_code_remote.js"></script></HTML>
 * 
 */
public class DataElement extends java.lang.Object
{
	/**
	 * Defines data of type NULL.
	 * 
	 * The value for data type <code>DataElement.NULL</code> is
	 * implicit, i.e., there is no representation of it.
	 * Accordingly there is no method to retrieve
	 * it, and attempts to retrieve the value will throw an exception.
	 * <P>
	 * The value of <code>NULL</code> is 0x00 (0).
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int NULL = 0x00;

	/**
	 * Defines an unsigned integer of size one byte.
	 * <P>
	 * The value of the constant <code>U_INT_1</code>
	 * is 0x08 (8).
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int U_INT_1 =  0x08;

	/**
	 * Defines an unsigned integer of size two bytes.
	 * <P>
	 * The value of the constant <code>U_INT_2</code> is 0x09 (9).
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int U_INT_2 =  0x09;

	/**
	 * Defines an unsigned integer of size four bytes.
	 * <P>
	 * The value of the constant <code>U_INT_4</code> is 0x0A (10).
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int U_INT_4 = 0x0A;

	/**
	 * Defines an unsigned integer of size eight bytes.
	 * <P>
	 * The value of the constant <code>U_INT_8</code> is 0x0B (11).
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int U_INT_8 = 0x0B;

	/**
	 * Defines an unsigned integer of size sixteen bytes.
	 * <P>
	 * The value of the constant <code>U_INT_16</code> is 0x0C (12).
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int U_INT_16 = 0x0C;

	/**
	 * Defines a signed integer of size one byte.
	 * <P>
	 * The value of the constant <code>INT_1</code> is 0x10 (16).
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int INT_1 = 0x10;

	/**
	 * Defines a signed integer of size two bytes.
	 * <P>
	 * The value of the constant <code>INT_2</code> is 0x11 (17).
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int INT_2 = 0x11;

	/**
	 * Defines a signed integer of size four bytes.
	 * <P>
	 * The value of the constant <code>INT_4</code> is 0x12 (18).
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int INT_4 = 0x12;

	/**
	 * Defines a signed integer of size eight bytes.
	 * <P>
	 * The value of the constant <code>INT_8</code> is 0x13 (19).
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int INT_8 = 0x13;

	/**
	 * Defines a signed integer of size sixteen bytes.
	 * <P>
	 * The value of the constant <code>INT_16</code> is 0x14 (20).
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int INT_16 = 0x14;

	/**
	 * Defines data of type URL.
	 * <P>
	 * The value of the constant <code>URL</code> is 0x40 (64).
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int URL =  0x40;

	/**
	 * Defines data of type UUID.
	 * <P>
	 * The value of the constant <code>UUID</code> is 0x18 (24).
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int UUID =  0x18;

	/**
	 * Defines data of type BOOL.
	 * <P>
	 * The value of the constant <code>BOOL</code> is 0x28 (40).
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int BOOL = 0x28;

	/**
	 * Defines data of type STRING.
	 * <P>
	 * The value of the constant <code>STRING</code> is 0x20 (32).
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int STRING =  0x20;

	/**
	 * Defines data of type DATSEQ.  The service attribute value whose
	 * data has this type must consider all the elements of the list,
	 * i.e. the value is the whole set and not a subset. The elements
	 * of the set can be of any type defined in this class, including
	 * DATSEQ.
	 * <P>
	 * The value of the constant <code>DATSEQ</code> is 0x30 (48).
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 */
	public static final int DATSEQ = 0x30;

	/**
	 * Defines data of type DATALT.  The service attribute value whose
	 * data has this type must consider only one of the elements of the
	 * set, i.e., the value is the not the whole set but only one
	 * element of the set. The user is free to choose any one element.
	 * The elements of the set can be of any type defined in this class,
	 * including DATALT.
	 * <P>
	 * The value of the constant <code>DATALT</code> is 0x38 (56).
	 * <P>
	 * <DT><B>See Also:</B>
	 * 
	 * 
	 */
	public static final int DATALT = 0x38;

	//following variables are implicitely defined by getter- or setter-methods:
	private int size;
	private int dataType;
	private long longValue;
	private boolean booleanValue;
	private java.lang.Object value;

	/**
	 * Creates a <code>DataElement</code> of type <code>NULL</code>,
	 * <code>DATALT</code>, or <code>DATSEQ</code>.
	 * <P>
	 * 
	 * @param valueType - the type of DataElement to create: NULL, DATALT, or DATSEQ
	 * @throws java.lang.IllegalArgumentException - if valueType is not NULL, DATALT, or DATSEQ
	 * @see #NULL
	 * @see #DATALT
	 * @see #DATSEQ
	 */
	public DataElement(int valueType)
	{
		//TODO implement DataElement
	}

	/**
	 * Creates a <code>DataElement</code> whose data type is
	 * <code>BOOL</code> and whose value is equal to <code>bool</code>.
	 * <P>
	 * 
	 * @param bool - the value of the DataElement of type BOOL.
	 * @see #BOOL
	 */
	public DataElement(boolean bool)
	{
		//TODO implement DataElement
	}

	/**
	 * Creates a <code>DataElement</code> that encapsulates an integer
	 * value of size <code>U_INT_1</code>, <code>U_INT_2</code>,
	 * <code>U_INT_4</code>, <code>INT_1</code>, <code>INT_2</code>,
	 * <code>INT_4</code>, and <code>INT_8</code>.
	 * The legal values for the <code>valueType</code> and the corresponding
	 * attribute values are:
	 * <TABLE>
	 * <TR><TH>Value Type</TH><TH>Value Range</TH></TR>
	 * <TR><TD><code>U_INT_1</code></TD>
	 * <TD>[0, 2<sup>8</sup>-1]</TD></TR>
	 * <TR><TD><code>U_INT_2</code></TD>
	 * <TD>[0, 2<sup>16</sup>-1]</TD></TR>
	 * <TR><TD><code>U_INT_4</code></TD>
	 * <TD>[0, 2<sup>32</sup>-1]</TD></TR>
	 * <TR><TD><code>INT_1</code></TD>
	 * <TD>[-2<sup>7</sup>, 2<sup>7</sup>-1]</TD></TR>
	 * <TR><TD><code>INT_2</code></TD>
	 * <TD>[-2<sup>15</sup>, 2<sup>15</sup>-1]</TD></TR>
	 * <TR><TD><code>INT_4</code></TD>
	 * <TD>[-2<sup>31</sup>, 2<sup>31</sup>-1]</TD></TR>
	 * <TR><TD><code>INT_8</code></TD>
	 * <TD>[-2<sup>63</sup>, 2<sup>63</sup>-1]</TD></TR>
	 * </TABLE>
	 * All other pairings are illegal and will cause an
	 * <code>IllegalArgumentException</code> to be thrown.
	 * <P>
	 * 
	 * @param valueType - the data type of the object that is being created; must be one of the following: U_INT_1, U_INT_2, U_INT_4, INT_1, INT_2, INT_4, or INT_8
	 * @param value - the value of the object being created; must be in the range specified for the given valueType
	 * @throws java.lang.IllegalArgumentException - if the valueType is not valid or the value for the given legal valueType is outside the valid range
	 * @see #U_INT_1
	 * @see #U_INT_2
	 * @see #U_INT_4
	 * @see #INT_1
	 * @see #INT_2
	 * @see #INT_4
	 * @see #INT_8
	 */
	public DataElement(int valueType, long value)
	{
		//TODO implement DataElement
	}

	/**
	 * Creates a <code>DataElement</code> whose data type is given by
	 * <code>valueType</code> and whose value is specified by the argument
	 * <code>value</code>. The legal values for the <code>valueType</code>
	 * and the corresponding attribute values are:
	 * <TABLE>
	 * <TR><TH>Value Type</TH><TH>Java Type / Value Range</TH></TR>
	 * <TR><TD><code>URL</code></TD><TD><code>java.lang.String</code>
	 * </TD></TR>
	 * <TR><TD><code>UUID</code></TD>
	 * <TD><code>javax.bluetooth.UUID</code></TD></TR>
	 * <TR><TD><code>STRING</code></TD>
	 * <TD><code>java.lang.String</code></TD></TR>
	 * <TR><TD><code>INT_16</code></TD>
	 * <TD>[-2<sup>127</sup>, 2<sup>127</sup>-1] as a byte array
	 * whose length must be 16</TD></TR>
	 * <TR><TD><code>U_INT_8</code></TD>
	 * <TD>[0, 2<sup>64</sup>-1] as a byte array whose length must
	 * be 8</TD></TR>
	 * <TR><TD><code>U_INT_16</code></TD>
	 * <TD>[0, 2<sup>128</sup>-1] as a byte array whose length must
	 * be 16</TD></TR>
	 * </TABLE>
	 * All other pairings are illegal and would cause an
	 * <code>IllegalArgumentException</code> exception.
	 * <P>
	 * 
	 * @param valueType - the data type of the object that is being created; must be one of the following: URL, UUID, STRING, INT_16, U_INT_8, or U_INT_16
	 * @param value - the value for the DataElement being created of type valueType
	 * @throws java.lang.IllegalArgumentException - if the value is not of the valueType type or is not in the range specified or is null
	 * @see #URL
	 * @see #UUID
	 * @see #STRING
	 * @see #U_INT_8
	 * @see #INT_16
	 * @see #U_INT_16
	 */
	public DataElement(int valueType, java.lang.Object value)
	{
		//TODO implement DataElement
	}

	/**
	 * Adds a <code>DataElement</code> to this <code>DATALT</code>
	 * or <code>DATSEQ</code> <code>DataElement</code> object.
	 * The <code>elem</code> will be added at the end of the list.
	 * The <code>elem</code> can be of any
	 * <code>DataElement</code> type, i.e., <code>URL</code>,
	 * <code>NULL</code>, <code>BOOL</code>, <code>UUID</code>,
	 * <code>STRING</code>, <code>DATSEQ</code>, <code>DATALT</code>,
	 * and the various signed and unsigned integer types.
	 * The same object may be added twice. If the object is
	 * successfully added the size of the <code>DataElement</code> is
	 * increased by one.
	 * <P>
	 * 
	 * @param elem - the DataElement object to add
	 * @throws java.lang.ClassCastException - if the method is invoked on a DataElement whose type is not DATALT or DATSEQ
	 * @throws java.lang.NullPointerException - if elem is null
	 */
	public void addElement( DataElement elem)
	{
		//TODO implement addElement
	}

	/**
	 * Inserts a <code>DataElement</code> at the specified location.
	 * This method can be invoked only on a <code>DATALT</code> or
	 * <code>DATSEQ</code> <code>DataElement</code>.
	 * <code>elem</code> can be of any <code>DataElement</code>
	 * type, i.e., <code>URL</code>,  <code>NULL</code>,
	 * <code>BOOL</code>,
	 * <code>UUID</code>, <code>STRING</code>, <code>DATSEQ</code>,
	 * <code>DATALT</code>, and the various signed and unsigned
	 * integers. The same object may be added twice. If the object is
	 * successfully added the size will be increased by one.
	 * Each element with an index greater than or equal to the specified
	 * index is shifted upward to have an index one
	 * greater than the value it had previously.
	 * <P>
	 * The <code>index</code> must be greater than or equal to 0 and
	 * less than or equal to the current size.  Therefore,
	 * <code>DATALT</code> and
	 * <code>DATSEQ</code> are zero-based objects.
	 * <P>
	 * 
	 * @param elem - the DataElement object to add
	 * @param index - the location at which to add the DataElement
	 * @throws java.lang.ClassCastException - if the method is invoked on an instance of DataElement whose type is not DATALT or DATSEQ
	 * @throws java.lang.IndexOutOfBoundsException - if index is negative or greater than the size of the DATALT or DATSEQ
	 * @throws java.lang.NullPointerException - if elem is null
	 */
	public void insertElementAt( DataElement elem, int index)
	{
		//TODO implement insertElementAt
	}

	/**
	 * Returns the number of <code>DataElements</code> that are present
	 * in this <code>DATALT</code> or <code>DATSEQ</code> object.
	 * It is possible that the number of elements is equal to zero.
	 * <P>
	 * 
	 * 
	 * @return the number of elements in this DATALT or DATSEQ
	 * @throws java.lang.ClassCastException - if this object is not of type DATALT or DATSEQ
	 */
	public int getSize()
	{
		return this.size;
	}

	/**
	 * Removes the first occurrence of the <code>DataElement</code>
	 * from this object.  <code>elem</code> may be of any type, i.e.,
	 * <code>URL</code>,  <code>NULL</code>, <code>BOOL</code>,
	 * <code>UUID</code>,  <code>STRING</code>, <code>DATSEQ</code>,
	 * <code>DATALT</code>, or the variously sized signed and unsigned
	 * integers.
	 * Only the first object in the list that is equal to
	 * <code>elem</code> will be removed. Other objects, if present,
	 * are not removed.  Since this class doesn?t override the
	 * <code>equals()</code> method of the <code>Object</code> class,
	 * the remove method compares only the
	 * references of objects. If <code>elem</code> is
	 * successfully removed the size of this <code>DataElement</code>
	 * is decreased by one.  Each <code>DataElement</code> in the
	 * <code>DATALT</code> or <code>DATSEQ</code> with an index greater
	 * than the index of <code>elem</code> is shifted downward to have
	 * an index one smaller than the value it had previously.
	 * <P>
	 * 
	 * @param elem - the DataElement to be removed
	 * @return true if the input value was found and removed; else false
	 * @throws java.lang.ClassCastException - if this object is not of type DATALT or DATSEQ
	 * @throws java.lang.NullPointerException - if elem is null
	 */
	public boolean removeElement( DataElement elem)
	{
		return false;
		//TODO implement removeElement
	}

	/**
	 * Returns the data type of the object this <code>DataElement</code>
	 * represents.
	 * <P>
	 * 
	 * 
	 * @return the data type of this DataElement object; the legal return values are: URL, NULL, BOOL, UUID, STRING, DATSEQ, DATALT, U_INT_1, U_INT_2, U_INT_4, U_INT_8, U_INT_16, INT_1, INT_2, INT_4, INT_8, or INT_16
	 */
	public int getDataType()
	{
		return this.dataType;
	}

	/**
	 * Returns the value of the <code>DataElement</code> if it can be
	 * represented as a <code>long</code>. The data type of the object must be
	 * <code>U_INT_1</code>,
	 * <code>U_INT_2</code>,
	 * <code>U_INT_4</code>,
	 * <code>INT_1</code>,
	 * <code>INT_2</code>,
	 * <code>INT_4</code>, or
	 * <code>INT_8</code>.
	 * <P>
	 * 
	 * 
	 * @return the value of the DataElement as a long
	 * @throws java.lang.ClassCastException - if the data type of the object is not U_INT_1, U_INT_2, U_INT_4, INT_1, INT_2, INT_4, or INT_8
	 */
	public long getLong()
	{
		return this.longValue;
	}

	/**
	 * Returns the value of the <code>DataElement</code> if it is represented as
	 * a <code>boolean</code>.
	 * <P>
	 * 
	 * 
	 * @return the boolean value of this DataElement object
	 * @throws java.lang.ClassCastException - if the data type of this object is not of type BOOL
	 */
	public boolean getBoolean()
	{
		return this.booleanValue;
	}

	/**
	 * Returns the value of this <code>DataElement</code> as an
	 * <code>Object</code>. This method returns the appropriate Java
	 * object for the following data types:
	 * <code>URL</code>,
	 * <code>UUID</code>,
	 * <code>STRING</code>,
	 * <code>DATSEQ</code>,
	 * <code>DATALT</code>,
	 * <code>U_INT_8</code>,
	 * <code>U_INT_16</code>, and
	 * <code>INT_16</code>.
	 * Modifying the returned <code>Object</code> will not change this
	 * <code>DataElement</code>.
	 * 
	 * The following are the legal pairs of data type
	 * and Java object type being returned.
	 * <TABLE>
	 * <TR><TH><code>DataElement Data Type</code></TH>
	 * <TH>Java Data Type</TH></TR>
	 * <TR><TD><code>URL</code></TD><TD><code>java.lang.String</code>
	 * </TD></TR>
	 * <TR><TD><code>UUID</code></TD>
	 * <TD><code>javax.bluetooth.UUID</code></TD></TR>
	 * <TR><TD><code>STRING</code></TD><TD><code>java.lang.String
	 * </code></TD></TR>
	 * <TR><TD><code>DATSEQ</code></TD>
	 * <TD><code>java.util.Enumeration</code></TD></TR>
	 * <TR><TD><code>DATALT</code></TD>
	 * <TD><code>java.util.Enumeration</code></TD></TR>
	 * <TR><TD><code>U_INT_8</code></TD>
	 * <TD>byte[] of length 8</TD></TR>
	 * <TR><TD><code>U_INT_16</code></TD>
	 * <TD>byte[] of length 16</TD></TR>
	 * <TR><TD><code>INT_16</code></TD>
	 * <TD>byte[] of length 16</TD></TR>
	 * </TABLE>
	 * <P>
	 * 
	 * 
	 * @return the value of this object
	 * @throws java.lang.ClassCastException - if the object is not a URL, UUID, STRING, DATSEQ, DATALT, U_INT_8, U_INT_16, or INT_16
	 */
	public java.lang.Object getValue()
	{
		return this.value;
	}

}
