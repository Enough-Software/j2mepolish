//#condition polish.android
// generated by de.enough.doc2java.Doc2Java (www.enough.de) on Tue Mar 24 10:34:27 EET 2009
package de.enough.polish.android.obex;

import java.io.IOException;

/**
 * 
 * The <code>Operation</code> interface provides ways to manipulate a single
 * OBEX PUT or GET operation.  The implementation of this interface sends
 * OBEX packets as they are built.  If during the operation the peer in the
 * operation ends the operation, an <code>IOException</code> is thrown on
 * the next read from the input stream, write to the output stream, or call to
 * <code>sendHeaders()</code>.
 * <STRONG>Definition of methods inherited from <code>ContentConnection</code>
 * </STRONG>
 * <code>getEncoding()</code> will always return <code>null</code>.
 * <BR><code>getLength()</code> will return the length specified by the OBEX
 * Length header or -1 if the OBEX Length header was not included.
 * <BR><code>getType()</code> will return the value specified in the OBEX Type
 * header or <code>null</code> if the OBEX Type header was not included.<BR>
 * <STRONG>How Headers are Handled</STRONG>
 * As headers are received, they may be retrieved through the
 * <code>getReceivedHeaders()</code> method.  If new headers are set during the
 * operation, the new headers will be sent during the next packet exchange.
 * <STRONG>PUT example</STRONG>
 * <PRE>
 * void putObjectViaOBEX(ClientSession conn, HeaderSet head, byte[] obj)
 * throws IOException {
 * 
 * // Include the length header
 * head.setHeader(head.LENGTH, new Long(obj.length));
 * 
 * // Initiate the PUT request
 * Operation op = conn.put(head);
 * 
 * // Open the output stream to put the object to it
 * DataOutputStream out = op.openDataOutputStream();
 * 
 * // Send the object to the server
 * out.write(obj);
 * 
 * // End the transaction
 * out.close();
 * op.close();
 * }
 * </PRE>
 * <STRONG>GET example</STRONG>
 * <PRE>
 * byte[] getObjectViaOBEX(ClientSession conn,
 * HeaderSet head) throws IOException {
 * 
 * // Send the initial GET request to the server
 * Operation op = conn.get(head);
 * 
 * // Retrieve the length of the object being sent back
 * int length = op.getLength();
 * 
 * // Create space for the object
 * byte[] obj = new byte[length];
 * 
 * // Get the object from the input stream
 * DataInputStream in = trans.openDataInputStream();
 * in.read(obj);
 * 
 * // End the transaction
 * in.close();
 * op.close();
 * 
 * return obj;
 * }
 * </PRE>
 * <H3>Client PUT Operation Flow</H3>
 * For PUT operations, a call to <code>close()</code> the
 * <code>OutputStream</code> returned from <code>openOutputStream()</code> or
 * <code>openDataOutputStream()</code> will signal that the request is done.
 * (In OBEX terms, the End-Of-Body header should be sent and the final bit in
 * the request will be set.)  At this point, the reply from the server may begin
 * to be processed.  A call to <code>getResponseCode()</code> will do an
 * implicit close on the <code>OutputStream</code> and therefore
 * signal that the request is done.
 * <H3>Client GET Operation Flow</H3>
 * For GET operation, a call to <code>openInputStream()</code> or
 * <code>openDataInputStream()</code> will signal that the request is done.
 * (In OBEX terms, the final bit in the request will be set.)  A call to
 * <code>getResponseCode()</code> will cause an implicit close on the
 * <code>InputStream</code>.  No further data may be read at this point.
 * 
 * <DD>1.2</DD>
 * <HR>
 * 
 * 
 * <!-- ========== METHOD SUMMARY =========== -->
 * 
 * <A NAME="method_summary"><!-- --></A>
 * <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
 * <B>Method Summary</B></FONT></TH>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;void</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="Operation.html#abort()" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/Operation.html#abort()">abort</A></B>()</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sends an ABORT message to the server.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A></CODE></FONT></TD>
 * <TD><CODE><B><A HREF="Operation.html#getReceivedHeaders()" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/Operation.html#getReceivedHeaders()">getReceivedHeaders</A></B>()</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the headers that have been received during the operation.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="Operation.html#getResponseCode()" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/Operation.html#getResponseCode()">getResponseCode</A></B>()</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the response code received from the server.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;void</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="Operation.html#sendHeaders(javax.obex.HeaderSet)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/Operation.html#sendHeaders(javax.obex.HeaderSet)">sendHeaders</A></B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;headers)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Specifies the headers that should be sent in the next OBEX message that
 * is sent.</TD>
 * </TR>
 * </TABLE>
 * &nbsp;
 * 
 * <!-- ============ METHOD DETAIL ========== -->
 * 
 * <A NAME="method_detail"><!-- --></A>
 * <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
 * <B>Method Detail</B></FONT></TH>
 * </TR>
 * </TABLE>
 * 
 * <A NAME="abort()"><!-- --></A><H3>
 * abort</H3>
 * <PRE>
 * void <B>abort</B>()
 * throws java.io.IOException</PRE>
 * <DD>Sends an ABORT message to the server.  By calling this method, the
 * corresponding input and output streams will be closed along with this
 * object.  No headers are sent in the abort request.  This will end the
 * operation since <code>close()</code> will be called by this method.
 * 
 * <DD><CODE>java.io.IOException</CODE> - if the transaction has already ended or if an
 * OBEX server calls this method</DL>
 * <HR>
 * 
 * <A NAME="getReceivedHeaders()"><!-- --></A><H3>
 * getReceivedHeaders</H3>
 * <PRE>
 * <A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A> <B>getReceivedHeaders</B>()
 * throws java.io.IOException</PRE>
 * <DD>Returns the headers that have been received during the operation.
 * Modifying the object returned has no effect on the headers that are
 * sent or retrieved.
 * 
 * <DD><CODE>java.io.IOException</CODE> - if this <code>Operation</code> has been closed</DL>
 * <HR>
 * 
 * <A NAME="sendHeaders(javax.obex.HeaderSet)"><!-- --></A><H3>
 * sendHeaders</H3>
 * <PRE>
 * void <B>sendHeaders</B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;headers)
 * throws java.io.IOException</PRE>
 * <DD>Specifies the headers that should be sent in the next OBEX message that
 * is sent.
 * <DD><CODE>java.io.IOException</CODE> - if this <code>Operation</code> has been closed
 * or the transaction has ended and no further messages will be exchanged
 * <DD><CODE>java.lang.IllegalArgumentException</CODE> - if <code>headers</code> was not
 * created by a call to <code>ServerRequestHandler.createHeaderSet()</code>
 * or <code>ClientSession.createHeaderSet()</code>
 * <DD><CODE>java.lang.NullPointerException</CODE> - if <code>headers</code> if
 * <code>null</code></DL>
 * <HR>
 * 
 * <A NAME="getResponseCode()"><!-- --></A><H3>
 * getResponseCode</H3>
 * <PRE>
 * int <B>getResponseCode</B>()
 * throws java.io.IOException</PRE>
 * <DD>Returns the response code received from the server.  Response codes
 * are defined in the <code>ResponseCodes</code> class.
 * 
 * <DD><CODE>java.io.IOException</CODE> - if an error occurred in the transport layer during
 * the transaction; if this object was created by an OBEX server<DT><B>See Also:</B><DD><A HREF="ResponseCodes.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ResponseCodes.html" title="class in javax.obex"><CODE>ResponseCodes</CODE></A></DL>
 * <!-- ========= END OF CLASS DATA ========= -->
 * <HR>
 * 
 * 
 * <!-- ======= START OF BOTTOM NAVBAR ====== -->
 * <A NAME="navbar_bottom"><!-- --></A>
 * <A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
 * <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
 * <TR>
 * <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
 * <A NAME="navbar_bottom_firstrow"><!-- --></A>
 * <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
 * <TR ALIGN="center" VALIGN="top">
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../overview-summary.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
 * <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../deprecated-list.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../index-all.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../help-doc.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
 * </TR>
 * </TABLE>
 * </TD>
 * <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
 * <b>JSR 82</b></EM>
 * </TD>
 * </TR>
 * 
 * <TR>
 * <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
 * &nbsp;<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex"><B>PREV CLASS</B></A>&nbsp;
 * &nbsp;<A HREF="PasswordAuthentication.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/PasswordAuthentication.html" title="class in javax.obex"><B>NEXT CLASS</B></A></FONT></TD>
 * <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
 * <A HREF="../../index.html-javax-obex-Operation.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/index.html?javax/obex/Operation.html" target="_top"><B>FRAMES</B></A>  &nbsp;
 * &nbsp;<A HREF="Operation.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/Operation.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
 * &nbsp;<SCRIPT type="text/javascript">
 * <!--
 * if(window==top) {
 * document.writeln('<A HREF="../../allclasses-noframe.html"tpa=http://java.sun.com/javame/reference/apis/jsr082/allclasses-noframe.html><B>All Classes</B></A>');
 * }
 * //-->
 * </SCRIPT>
 * <NOSCRIPT>
 * <A HREF="../../allclasses-noframe.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/allclasses-noframe.html"><B>All Classes</B></A>
 * </NOSCRIPT>
 * 
 * 
 * </FONT></TD>
 * </TR>
 * <TR>
 * <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
 * SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
 * <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
 * DETAIL:&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
 * </TR>
 * </TABLE>
 * <A NAME="skip-navbar_bottom"></A>
 * <!-- ======== END OF BOTTOM NAVBAR ======= -->
 * 
 * <HR>
 * <small>Copyright (c) 2006 Sun Microsystems, Inc. All rights reserved. <b>Use is subject to <a href="http://java.sun.com/javame/reference/apis/license.html" target="_top">License Terms</a>.</b> Your use of this web site or any of its content or software indicates your agreement to be bound by these License Terms.<br><br>For more information, please consult the <a href="http://jcp.org/en/jsr/detail?id=82" target="_top">JSR 82 specification.</a></small>
 * </BODY>
 * <script language="JavaScript" src="../../../../../../js/omi/jsc/s_code_remote.js" tppabs="http://java.sun.com/js/omi/jsc/s_code_remote.js"></script></HTML>
 * 
 */
public interface Operation
{
	/**
	 * <P>
	 * <STRONG>GET example</STRONG>
	 * <P>
	 * <PRE>
	 * byte[] getObjectViaOBEX(ClientSession conn,
	 * HeaderSet head) throws IOException {
	 * 
	 * // Send the initial GET request to the server
	 * Operation op = conn.get(head);
	 * 
	 * // Retrieve the length of the object being sent back
	 * int length = op.getLength();
	 * 
	 * // Create space for the object
	 * byte[] obj = new byte[length];
	 * 
	 * // Get the object from the input stream
	 * DataInputStream in = trans.openDataInputStream();
	 * in.read(obj);
	 * 
	 * // End the transaction
	 * in.close();
	 * op.close();
	 * 
	 * return obj;
	 * }
	 * </PRE>
	 * <H3>Client PUT Operation Flow</H3>
	 * For PUT operations, a call to <code>close()</code> the
	 * <code>OutputStream</code> returned from <code>openOutputStream()</code> or
	 * <code>openDataOutputStream()</code> will signal that the request is done.
	 * (In OBEX terms, the End-Of-Body header should be sent and the final bit in
	 * the request will be set.)  At this point, the reply from the server may begin
	 * to be processed.  A call to <code>getResponseCode()</code> will do an
	 * implicit close on the <code>OutputStream</code> and therefore
	 * signal that the request is done.
	 * <H3>Client GET Operation Flow</H3>
	 * For GET operation, a call to <code>openInputStream()</code> or
	 * <code>openDataInputStream()</code> will signal that the request is done.
	 * (In OBEX terms, the final bit in the request will be set.)  A call to
	 * <code>getResponseCode()</code> will cause an implicit close on the
	 * <code>InputStream</code>.  No further data may be read at this point.
	 * <P>
	 * 
	 * <P>
	 * 
	 * @since 1.2
	 */
	void putObjectViaOBEX(ClientSession conn, HeaderSet head, byte[] obj) throws IOException; // Include the length header head.setHeader(head.LENGTH, new Long(obj.length));  // Initiate the PUT request Operation op = conn.put(head);  // Open the output stream to put the object to it DataOutputStream out = op.openDataOutputStream();  // Send the object to the server out.write(obj);  // End the transaction out.close(); op.close(); };

	/**
	 * Sends an ABORT message to the server.  By calling this method, the
	 * corresponding input and output streams will be closed along with this
	 * object.  No headers are sent in the abort request.  This will end the
	 * operation since <code>close()</code> will be called by this method.
	 * <P>
	 * 
	 * 
	 * @throws java.io.IOException - if the transaction has already ended or if an OBEX server calls this method
	 */
	void abort() throws java.io.IOException;

	/**
	 * Returns the headers that have been received during the operation.
	 * Modifying the object returned has no effect on the headers that are
	 * sent or retrieved.
	 * <P>
	 * 
	 * 
	 * @return the headers received during this Operation
	 * @throws java.io.IOException - if this Operation has been closed
	 */
	HeaderSet getReceivedHeaders() throws java.io.IOException;

	/**
	 * Specifies the headers that should be sent in the next OBEX message that
	 * is sent.
	 * <P>
	 * 
	 * @param headers - the headers to send in the next message
	 * @throws java.io.IOException - if this Operation has been closed or the transaction has ended and no further messages will be exchanged
	 * @throws java.lang.IllegalArgumentException - if headers was not created by a call to ServerRequestHandler.createHeaderSet() or ClientSession.createHeaderSet()
	 * @throws java.lang.NullPointerException - if headers if null
	 */
	void sendHeaders( HeaderSet headers) throws java.io.IOException;

	/**
	 * Returns the response code received from the server.  Response codes
	 * are defined in the <code>ResponseCodes</code> class.
	 * <P>
	 * 
	 * 
	 * @return the response code retrieved from the server
	 * @throws java.io.IOException - if an error occurred in the transport layer during the transaction; if this object was created by an OBEX server
	 * @see ResponseCodes
	 */
	int getResponseCode() throws java.io.IOException;

}
