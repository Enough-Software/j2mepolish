//#condition polish.android
// generated by de.enough.doc2java.Doc2Java (www.enough.de) on Tue Mar 24 10:34:27 EET 2009
package de.enough.polish.android.obex;

import java.io.IOException;

/**
 * 
 * The <code>ClientSession</code> interface provides methods for OBEX requests.
 * This interface provides a way to define headers for any OBEX operation.
 * OBEX operations are CONNECT, SETPATH, PUT, GET and DISCONNECT.  For PUTs and
 * GETs, this interface will return a <code>javax.obex.Operation</code> object
 * to complete the operations.  For CONNECT, DISCONNECT, and SETPATH operations,
 * this interface will complete the operation and return the result in a
 * <code>HeaderSet</code> object.
 * <STRONG>Connection ID and Target Headers</STRONG>
 * According to the IrOBEX specification, a packet may not contain a Connection
 * ID and Target header.  Since the Connection ID header is managed by the
 * implementation, it will not send a Connection ID header if a Connection ID
 * was specified in a packet that has a Target header.  In other words, if an
 * application adds a Target header to a <code>HeaderSet</code> object used
 * in an OBEX operation and a Connection ID was specified, no Connection ID
 * will be sent in the packet containing the Target header.
 * <STRONG>CREATE-EMPTY and PUT-DELETE Requests</STRONG>
 * To perform a CREATE-EMPTY request, the client must call the
 * <code>put()</code> method.  With the <code>Operation</code> object returned,
 * the client must open the output stream by calling
 * <code>openOutputStream()</code> and then close the stream by calling
 * <code>close()</code> on the <code>OutputStream</code> without writing
 * any data.  Using the <code>DataOutputStream</code> returned from
 * <code>openDataOutputStream()</code> works the same way.
 * There are two ways to perform a PUT-DELETE request.  The
 * <code>delete()</code> method is one way to perform a PUT-DELETE request.
 * The second way to perform a PUT-DELETE request is by calling
 * <code>put()</code> and never calling <code>openOutputStream()</code> or
 * <code>openDataOutputStream()</code> on the <code>Operation</code> object
 * returned from <code>put()</code>.
 * <STRONG>PUT example</STRONG>
 * <PRE>
 * void putObjectViaOBEX(ClientSession conn, HeaderSet head, byte[] obj)
 * throws IOException {
 * 
 * // Include the length header
 * head.setHeader(HeaderSet.LENGTH, new Long(obj.length));
 * 
 * // Initiate the PUT request
 * Operation op = conn.put(head);
 * 
 * // Open the output stream to put the object to it
 * OutputStream out = op.openOutputStream();
 * 
 * // Send the object to the server
 * out.write(obj);
 * 
 * // End the transaction
 * out.close();
 * op.close();
 * }
 * </PRE>
 * <STRONG>GET example</STRONG>
 * <PRE>
 * byte[] getObjectViaOBEX(ClientSession conn,
 * HeaderSet head) throws IOException {
 * 
 * // Send the initial GET request to the server
 * Operation op = conn.get(head);
 * 
 * // Get the object from the input stream
 * InputStream in = op.openInputStream();
 * 
 * ByteArrayOutputStream out = new ByteArrayOutputStream();
 * int data = in.read();
 * while (data != -1) {
 * out.write((byte)data);
 * data = in.read();
 * }
 * 
 * // End the transaction
 * in.close();
 * op.close();
 * 
 * byte[] obj = out.toByteArray();
 * out.close();
 * 
 * return obj;
 * }
 * </PRE>
 * 
 * <DD>1.2</DD>
 * <HR>
 * 
 * 
 * <!-- ========== METHOD SUMMARY =========== -->
 * 
 * <A NAME="method_summary"><!-- --></A>
 * <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
 * <B>Method Summary</B></FONT></TH>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A></CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ClientSession.html#connect(javax.obex.HeaderSet)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ClientSession.html#connect(javax.obex.HeaderSet)">connect</A></B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;headers)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Completes an OBEX CONNECT operation.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A></CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ClientSession.html#createHeaderSet()" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ClientSession.html#createHeaderSet()">createHeaderSet</A></B>()</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a <code>javax.obex.HeaderSet</code> object.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A></CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ClientSession.html#delete(javax.obex.HeaderSet)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ClientSession.html#delete(javax.obex.HeaderSet)">delete</A></B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;headers)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Performs an OBEX DELETE operation.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A></CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ClientSession.html#disconnect(javax.obex.HeaderSet)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ClientSession.html#disconnect(javax.obex.HeaderSet)">disconnect</A></B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;headers)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Completes an OBEX DISCONNECT operation.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;<A HREF="Operation.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/Operation.html" title="interface in javax.obex">Operation</A></CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ClientSession.html#get(javax.obex.HeaderSet)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ClientSession.html#get(javax.obex.HeaderSet)">get</A></B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;headers)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Performs an OBEX GET operation.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;long</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ClientSession.html#getConnectionID()" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ClientSession.html#getConnectionID()">getConnectionID</A></B>()</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Retrieves the connection ID that is being used in the present connection.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;<A HREF="Operation.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/Operation.html" title="interface in javax.obex">Operation</A></CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ClientSession.html#put(javax.obex.HeaderSet)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ClientSession.html#put(javax.obex.HeaderSet)">put</A></B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;headers)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Performs an OBEX PUT operation.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;void</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ClientSession.html#setAuthenticator(javax.obex.Authenticator)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ClientSession.html#setAuthenticator(javax.obex.Authenticator)">setAuthenticator</A></B>(<A HREF="Authenticator.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/Authenticator.html" title="interface in javax.obex">Authenticator</A>&nbsp;auth)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the <code>Authenticator</code> to use with this connection.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;void</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ClientSession.html#setConnectionID(long)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ClientSession.html#setConnectionID(long)">setConnectionID</A></B>(long&nbsp;id)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the connection ID header to include in the request packets.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A></CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ClientSession.html#setPath(javax.obex.HeaderSet, boolean, boolean)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ClientSession.html#setPath(javax.obex.HeaderSet, boolean, boolean)">setPath</A></B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;headers,
 * boolean&nbsp;backup,
 * boolean&nbsp;create)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Completes an OBEX SETPATH operation.</TD>
 * </TR>
 * </TABLE>
 * &nbsp;
 * 
 * <!-- ============ METHOD DETAIL ========== -->
 * 
 * <A NAME="method_detail"><!-- --></A>
 * <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
 * <B>Method Detail</B></FONT></TH>
 * </TR>
 * </TABLE>
 * 
 * <A NAME="setAuthenticator(javax.obex.Authenticator)"><!-- --></A><H3>
 * setAuthenticator</H3>
 * <PRE>
 * void <B>setAuthenticator</B>(<A HREF="Authenticator.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/Authenticator.html" title="interface in javax.obex">Authenticator</A>&nbsp;auth)</PRE>
 * <DD>Sets the <code>Authenticator</code> to use with this connection.  The
 * <code>Authenticator</code> allows an application to respond to
 * authentication challenge and authentication response headers.  If no
 * <code>Authenticator</code> is set, the
 * response to an authentication challenge or authentication response
 * header is implementation dependent.
 * <DD><CODE>java.lang.NullPointerException</CODE> - if <code>auth</code> is <code>null</code></DL>
 * <HR>
 * 
 * <A NAME="createHeaderSet()"><!-- --></A><H3>
 * createHeaderSet</H3>
 * <PRE>
 * <A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A> <B>createHeaderSet</B>()</PRE>
 * <DD>Creates a <code>javax.obex.HeaderSet</code> object.  This object
 * can be used to define header values in a request.
 * 
 * <HR>
 * 
 * <A NAME="setConnectionID(long)"><!-- --></A><H3>
 * setConnectionID</H3>
 * <PRE>
 * void <B>setConnectionID</B>(long&nbsp;id)</PRE>
 * <DD>Sets the connection ID header to include in the request packets.  If a
 * connection ID is set, it will be sent in each request to the server
 * except for the CONNECT request.  An application only needs to set the
 * connection ID if it is trying to operate with  different targets over
 * the same transport layer connection.  If a client receives a
 * connection ID from the server, the implementation will continue to use
 * that connection ID until the application changes it or until the
 * connection is closed.
 * <DD><CODE>java.lang.IllegalArgumentException</CODE> - if <code>id</code> is not in the
 * range 0 to 2<sup>32</sup>-1<DT><B>See Also:</B><DD><A HREF="ClientSession.html#getConnectionID()" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ClientSession.html#getConnectionID()"><CODE>getConnectionID()</CODE></A></DL>
 * <HR>
 * 
 * <A NAME="getConnectionID()"><!-- --></A><H3>
 * getConnectionID</H3>
 * <PRE>
 * long <B>getConnectionID</B>()</PRE>
 * <DD>Retrieves the connection ID that is being used in the present connection.
 * This method will return -1 if no connection ID is being used.
 * 
 * used<DT><B>See Also:</B><DD><A HREF="ClientSession.html#setConnectionID(long)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ClientSession.html#setConnectionID(long)"><CODE>setConnectionID(long)</CODE></A></DL>
 * <HR>
 * 
 * <A NAME="connect(javax.obex.HeaderSet)"><!-- --></A><H3>
 * connect</H3>
 * <PRE>
 * <A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A> <B>connect</B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;headers)
 * throws java.io.IOException</PRE>
 * <DD>Completes an OBEX CONNECT operation.  If the <code>headers</code>
 * argument is <code>null</code>, no headers will be sent in the request.
 * This method will never return <code>null</code>.
 * This method must be called and a successful response code of
 * <code>OBEX_HTTP_OK</code> must be received before  <code>put()</code>,
 * <code>get()</code>, <code>setPath()</code>, <code>delete()</code>, or
 * <code>disconnect()</code> may be called.  Similarly, after a successful
 * call to <code>disconnect()</code>, this method must be called before
 * calling <code>put()</code>, <code>get()</code>, <code>setPath()</code>,
 * <code>delete()</code>, or <code>disconnect()</code>.
 * <DD><CODE>java.io.IOException</CODE> - if an error occurred in the transport layer;  if
 * the client is already in an operation; if this method had already been
 * called with a successful response code of <code>OBEX_HTTP_OK</code> and
 * calls to <code>disconnect()</code> have not returned a response code
 * of <code>OBEX_HTTP_OK</code>; if the
 * headers defined in <code>headers</code> exceed the max packet length
 * <DD><CODE>java.lang.IllegalArgumentException</CODE> - if <code>headers</code> was not
 * created by a call to <code>createHeaderSet()</code></DL>
 * <HR>
 * 
 * <A NAME="disconnect(javax.obex.HeaderSet)"><!-- --></A><H3>
 * disconnect</H3>
 * <PRE>
 * <A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A> <B>disconnect</B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;headers)
 * throws java.io.IOException</PRE>
 * <DD>Completes an OBEX DISCONNECT operation.  If the <code>headers</code>
 * argument is <code>null</code>, no headers will be sent in the request.
 * This method will end the session. A new session may be started by
 * calling <code>connect()</code>.  This method will never return
 * <code>null</code>.
 * <DD><CODE>java.io.IOException</CODE> - if an error occurred in the transport layer; if
 * the client is already in an operation; if an OBEX connection does not
 * exist because <code>connect()</code> has not been called; if
 * <code>disconnect()</code> has been called and received a response code
 * of <code>OBEX_HTTP_OK</code> after the last call to
 * <code>connect()</code>; if the headers defined in <code>headers</code>
 * exceed the max packet length
 * <DD><CODE>java.lang.IllegalArgumentException</CODE> - if <code>headers</code> were not
 * created by a call to <code>createHeaderSet()</code></DL>
 * <HR>
 * 
 * <A NAME="setPath(javax.obex.HeaderSet, boolean, boolean)"><!-- --></A><H3>
 * setPath</H3>
 * <PRE>
 * <A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A> <B>setPath</B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;headers,
 * boolean&nbsp;backup,
 * boolean&nbsp;create)
 * throws java.io.IOException</PRE>
 * <DD>Completes an OBEX SETPATH operation.  This method will never
 * return <code>null</code>.
 * directory before moving to the directory specified in name (similar to
 * cd .. on PCs); if  <code>false</code>, apply <code>name</code> to the
 * current directory<DD><CODE>create</CODE> - if <code>true</code>, instructs the server to  create the
 * directory if it does not exist; if <code>false</code>, instruct the
 * server to return an error code if the directory does not exist<DD><CODE>headers</CODE> - the headers to include in the SETPATH request
 * <DD><CODE>java.io.IOException</CODE> - if an error occurred in the transport layer;  if
 * the client is already in an operation; if an OBEX connection does not
 * exist because <code>connect()</code> has not been called; if
 * <code>disconnect()</code> had been called and a response code of
 * <code>OBEX_HTTP_OK</code> was received; if the headers defined in
 * <code>headers</code> exceed the max packet length
 * <DD><CODE>java.lang.IllegalArgumentException</CODE> - if <code>headers</code> were not
 * created by a call to <code>createHeaderSet()</code></DL>
 * <HR>
 * 
 * <A NAME="delete(javax.obex.HeaderSet)"><!-- --></A><H3>
 * delete</H3>
 * <PRE>
 * <A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A> <B>delete</B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;headers)
 * throws java.io.IOException</PRE>
 * <DD>Performs an OBEX DELETE operation.  This method will never return
 * <code>null</code>.
 * <DD><CODE>java.io.IOException</CODE> - if an error occurred in the transport layer;  if
 * the client is already in an operation; if an OBEX connection does not
 * exist because <code>connect()</code> has not been called; if
 * <code>disconnect()</code> had been called and a response code of
 * <code>OBEX_HTTP_OK</code> was received; if the headers defined in
 * <code>headers</code> exceed the max packet length
 * <DD><CODE>java.lang.IllegalArgumentException</CODE> - if <code>headers</code> were not
 * created by a call to <code>createHeaderSet()</code></DL>
 * <HR>
 * 
 * <A NAME="get(javax.obex.HeaderSet)"><!-- --></A><H3>
 * get</H3>
 * <PRE>
 * <A HREF="Operation.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/Operation.html" title="interface in javax.obex">Operation</A> <B>get</B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;headers)
 * throws java.io.IOException</PRE>
 * <DD>Performs an OBEX GET operation.  This method will send the OBEX headers
 * provided to the server and return an <code>Operation</code> object to
 * continue with the operation.  This method will never return
 * <code>null</code>.
 * request
 * <DD><CODE>java.io.IOException</CODE> - if an error occurred in the transport layer; if
 * an OBEX connection does not
 * exist because <code>connect()</code> has not been called; if
 * <code>disconnect()</code> had been called and a response code of
 * <code>OBEX_HTTP_OK</code> was received; if <code>connect()</code> has not
 * been called; if the client is already in an operation;
 * <DD><CODE>java.lang.IllegalArgumentException</CODE> - if <code>headers</code> were not
 * created by a call to <code>createHeaderSet()</code><DT><B>See Also:</B><DD><A HREF="Operation.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/Operation.html" title="interface in javax.obex"><CODE>Operation</CODE></A></DL>
 * <HR>
 * 
 * <A NAME="put(javax.obex.HeaderSet)"><!-- --></A><H3>
 * put</H3>
 * <PRE>
 * <A HREF="Operation.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/Operation.html" title="interface in javax.obex">Operation</A> <B>put</B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;headers)
 * throws java.io.IOException</PRE>
 * <DD>Performs an OBEX PUT operation.  This method will send the OBEX headers
 * provided to the server and return an <code>Operation</code> object to
 * continue with the PUT operation.  This method will never return
 * <code>null</code>.
 * <DD><CODE>java.io.IOException</CODE> - if an error occurred in the transport layer; if
 * an OBEX connection does not
 * exist because <code>connect()</code> has not been called; if
 * <code>disconnect()</code> had been called and a response code of
 * <code>OBEX_HTTP_OK</code> was received; if <code>connect()</code> has not
 * been called; if the client is already in an operation;
 * <DD><CODE>java.lang.IllegalArgumentException</CODE> - if <code>headers</code> were not
 * created by a call to <code>createHeaderSet()</code><DT><B>See Also:</B><DD><A HREF="Operation.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/Operation.html" title="interface in javax.obex"><CODE>Operation</CODE></A></DL>
 * <!-- ========= END OF CLASS DATA ========= -->
 * <HR>
 * 
 * 
 * <!-- ======= START OF BOTTOM NAVBAR ====== -->
 * <A NAME="navbar_bottom"><!-- --></A>
 * <A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
 * <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
 * <TR>
 * <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
 * <A NAME="navbar_bottom_firstrow"><!-- --></A>
 * <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
 * <TR ALIGN="center" VALIGN="top">
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../overview-summary.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
 * <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../deprecated-list.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../index-all.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../help-doc.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
 * </TR>
 * </TABLE>
 * </TD>
 * <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
 * <b>JSR 82</b></EM>
 * </TD>
 * </TR>
 * 
 * <TR>
 * <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
 * &nbsp;<A HREF="Authenticator.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/Authenticator.html" title="interface in javax.obex"><B>PREV CLASS</B></A>&nbsp;
 * &nbsp;<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex"><B>NEXT CLASS</B></A></FONT></TD>
 * <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
 * <A HREF="../../index.html-javax-obex-ClientSession.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/index.html?javax/obex/ClientSession.html" target="_top"><B>FRAMES</B></A>  &nbsp;
 * &nbsp;<A HREF="ClientSession.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ClientSession.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
 * &nbsp;<SCRIPT type="text/javascript">
 * <!--
 * if(window==top) {
 * document.writeln('<A HREF="../../allclasses-noframe.html"/tpa=http://java.sun.com/javame/reference/apis/jsr082/allclasses-noframe.html><B>All Classes</B></A>');
 * }
 * //-->
 * </SCRIPT>
 * <NOSCRIPT>
 * <A HREF="../../allclasses-noframe.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/allclasses-noframe.html"><B>All Classes</B></A>
 * </NOSCRIPT>
 * 
 * 
 * </FONT></TD>
 * </TR>
 * <TR>
 * <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
 * SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
 * <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
 * DETAIL:&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
 * </TR>
 * </TABLE>
 * <A NAME="skip-navbar_bottom"></A>
 * <!-- ======== END OF BOTTOM NAVBAR ======= -->
 * 
 * <HR>
 * <small>Copyright (c) 2006 Sun Microsystems, Inc. All rights reserved. <b>Use is subject to <a href="http://java.sun.com/javame/reference/apis/license.html" target="_top">License Terms</a>.</b> Your use of this web site or any of its content or software indicates your agreement to be bound by these License Terms.<br><br>For more information, please consult the <a href="http://jcp.org/en/jsr/detail?id=82" target="_top">JSR 82 specification.</a></small>
 * </BODY>
 * <script language="JavaScript" src="../../../../../../js/omi/jsc/s_code_remote.js" tppabs="http://java.sun.com/js/omi/jsc/s_code_remote.js"></script></HTML>
 * 
 */
public interface ClientSession
{
	/**
	 * <P>
	 * <STRONG>GET example</STRONG>
	 * <P>
	 * <PRE>
	 * byte[] getObjectViaOBEX(ClientSession conn,
	 * HeaderSet head) throws IOException {
	 * 
	 * // Send the initial GET request to the server
	 * Operation op = conn.get(head);
	 * 
	 * // Get the object from the input stream
	 * InputStream in = op.openInputStream();
	 * 
	 * ByteArrayOutputStream out = new ByteArrayOutputStream();
	 * int data = in.read();
	 * while (data != -1) {
	 * out.write((byte)data);
	 * data = in.read();
	 * }
	 * 
	 * // End the transaction
	 * in.close();
	 * op.close();
	 * 
	 * byte[] obj = out.toByteArray();
	 * out.close();
	 * 
	 * return obj;
	 * }
	 * </PRE>
	 * <P>
	 * 
	 * <P>
	 * 
	 * @since 1.2
	 */
	void putObjectViaOBEX(ClientSession conn, HeaderSet head, byte[] obj) throws IOException;
		// Include the length header head.setHeader(HeaderSet.LENGTH, new Long(obj.length));  
		// Initiate the PUT request Operation op = conn.put(head);  
		// Open the output stream to put the object to it OutputStream out = op.openOutputStream();  
		// Send the object to the server out.write(obj);  
		// End the transaction out.close(); op.close(); 

	/**
	 * Sets the <code>Authenticator</code> to use with this connection.  The
	 * <code>Authenticator</code> allows an application to respond to
	 * authentication challenge and authentication response headers.  If no
	 * <code>Authenticator</code> is set, the
	 * response to an authentication challenge or authentication response
	 * header is implementation dependent.
	 * <P>
	 * 
	 * @param auth - the Authenticator to use for this connection
	 * @throws java.lang.NullPointerException - if auth is null
	 */
	void setAuthenticator( Authenticator auth);

	/**
	 * Creates a <code>javax.obex.HeaderSet</code> object.  This object
	 * can be used to define header values in a request.
	 * <P>
	 * 
	 * 
	 * @return a new javax.obex.HeaderSet object
	 * @see HeaderSet
	 */
	HeaderSet createHeaderSet();

	/**
	 * Sets the connection ID header to include in the request packets.  If a
	 * connection ID is set, it will be sent in each request to the server
	 * except for the CONNECT request.  An application only needs to set the
	 * connection ID if it is trying to operate with  different targets over
	 * the same transport layer connection.  If a client receives a
	 * connection ID from the server, the implementation will continue to use
	 * that connection ID until the application changes it or until the
	 * connection is closed.
	 * <P>
	 * 
	 * @param id - the connection ID to use
	 * @throws java.lang.IllegalArgumentException - if id is not in the range 0 to 2 32-1
	 * @see #getConnectionID()
	 */
	void setConnectionID(long id);

	/**
	 * Retrieves the connection ID that is being used in the present connection.
	 * This method will return -1 if no connection ID is being used.
	 * <P>
	 * 
	 * 
	 * @return the connection ID being used or -1 if no connection ID is being used
	 * @see #setConnectionID(long)
	 */
	long getConnectionID();

	/**
	 * Completes an OBEX CONNECT operation.  If the <code>headers</code>
	 * argument is <code>null</code>, no headers will be sent in the request.
	 * This method will never return <code>null</code>.
	 * <P>
	 * This method must be called and a successful response code of
	 * <code>OBEX_HTTP_OK</code> must be received before  <code>put()</code>,
	 * <code>get()</code>, <code>setPath()</code>, <code>delete()</code>, or
	 * <code>disconnect()</code> may be called.  Similarly, after a successful
	 * call to <code>disconnect()</code>, this method must be called before
	 * calling <code>put()</code>, <code>get()</code>, <code>setPath()</code>,
	 * <code>delete()</code>, or <code>disconnect()</code>.
	 * <P>
	 * 
	 * @param headers - the headers to send in the CONNECT request
	 * @return the headers that were returned from the server
	 * @throws java.io.IOException - if an error occurred in the transport layer;  if the client is already in an operation; if this method had already been called with a successful response code of OBEX_HTTP_OK and calls to disconnect() have not returned a response code of OBEX_HTTP_OK; if the headers defined in headers exceed the max packet length
	 * @throws java.lang.IllegalArgumentException - if headers was not created by a call to createHeaderSet()
	 */
	HeaderSet connect( HeaderSet headers) throws java.io.IOException;

	/**
	 * Completes an OBEX DISCONNECT operation.  If the <code>headers</code>
	 * argument is <code>null</code>, no headers will be sent in the request.
	 * This method will end the session. A new session may be started by
	 * calling <code>connect()</code>.  This method will never return
	 * <code>null</code>.
	 * <P>
	 * 
	 * @param headers - the header to send in the DISCONNECT request
	 * @return the headers returned by the server
	 * @throws java.io.IOException - if an error occurred in the transport layer; if the client is already in an operation; if an OBEX connection does not exist because connect() has not been called; if disconnect() has been called and received a response code of OBEX_HTTP_OK after the last call to connect(); if the headers defined in headers exceed the max packet length
	 * @throws java.lang.IllegalArgumentException - if headers were not created by a call to createHeaderSet()
	 */
	HeaderSet disconnect( HeaderSet headers) throws java.io.IOException;

	/**
	 * Completes an OBEX SETPATH operation.  This method will never
	 * return <code>null</code>.
	 * <P>
	 * 
	 * @param backup - if true, instructs the server to back up one directory before moving to the directory specified in name (similar to cd .. on PCs); if  false, apply name to the current directory
	 * @param create - if true, instructs the server to  create the directory if it does not exist; if false, instruct the server to return an error code if the directory does not exist
	 * @param headers - the headers to include in the SETPATH request
	 * @return the headers that were returned from the server
	 * @throws java.io.IOException - if an error occurred in the transport layer;  if the client is already in an operation; if an OBEX connection does not exist because connect() has not been called; if disconnect() had been called and a response code of OBEX_HTTP_OK was received; if the headers defined in headers exceed the max packet length
	 * @throws java.lang.IllegalArgumentException - if headers were not created by a call to createHeaderSet()
	 */
	HeaderSet setPath( HeaderSet headers, boolean backup, boolean create) throws java.io.IOException;

	/**
	 * Performs an OBEX DELETE operation.  This method will never return
	 * <code>null</code>.
	 * <P>
	 * 
	 * @param headers - the header to send in the DELETE request
	 * @return the headers returned by the server
	 * @throws java.io.IOException - if an error occurred in the transport layer;  if the client is already in an operation; if an OBEX connection does not exist because connect() has not been called; if disconnect() had been called and a response code of OBEX_HTTP_OK was received; if the headers defined in headers exceed the max packet length
	 * @throws java.lang.IllegalArgumentException - if headers were not created by a call to createHeaderSet()
	 */
	HeaderSet delete( HeaderSet headers) throws java.io.IOException;

	/**
	 * Performs an OBEX GET operation.  This method will send the OBEX headers
	 * provided to the server and return an <code>Operation</code> object to
	 * continue with the operation.  This method will never return
	 * <code>null</code>.
	 * <P>
	 * 
	 * @param headers - the OBEX headers to send as part of the initial GET request
	 * @return the OBEX operation that will complete the GET request
	 * @throws java.io.IOException - if an error occurred in the transport layer; if an OBEX connection does not exist because connect() has not been called; if disconnect() had been called and a response code of OBEX_HTTP_OK was received; if connect() has not been called; if the client is already in an operation;
	 * @throws java.lang.IllegalArgumentException - if headers were not created by a call to createHeaderSet()
	 * @see Operation
	 */
	Operation get( HeaderSet headers) throws java.io.IOException;

	/**
	 * Performs an OBEX PUT operation.  This method will send the OBEX headers
	 * provided to the server and return an <code>Operation</code> object to
	 * continue with the PUT operation.  This method will never return
	 * <code>null</code>.
	 * <P>
	 * 
	 * @param headers - the OBEX headers to send in the initial PUT request
	 * @return the operation object used to complete the PUT request
	 * @throws java.io.IOException - if an error occurred in the transport layer; if an OBEX connection does not exist because connect() has not been called; if disconnect() had been called and a response code of OBEX_HTTP_OK was received; if connect() has not been called; if the client is already in an operation;
	 * @throws java.lang.IllegalArgumentException - if headers were not created by a call to createHeaderSet()
	 * @see Operation
	 */
	Operation put( HeaderSet headers) throws java.io.IOException;

}
