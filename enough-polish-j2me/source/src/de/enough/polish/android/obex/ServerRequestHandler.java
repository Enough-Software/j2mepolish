//#condition polish.android
// generated by de.enough.doc2java.Doc2Java (www.enough.de) on Tue Mar 24 10:34:27 EET 2009
package de.enough.polish.android.obex;

/**
 * 
 * The <code>ServerRequestHandler</code> class defines an event
 * listener that will respond to OBEX requests made to the server.
 * The <code>onConnect()</code>, <code>onSetPath()</code>,
 * <code>onDelete()</code>, <code>onGet()</code>,
 * and <code>onPut()</code> methods may return any response code defined
 * in the <code>ResponseCodes</code> class except for
 * <code>OBEX_HTTP_CONTINUE</code>.  If <code>OBEX_HTTP_CONTINUE</code> or
 * a value not defined in the <code>ResponseCodes</code> class is returned,
 * the server implementation will send an <code>OBEX_HTTP_INTERNAL_ERROR</code>
 * response to the client.
 * <STRONG>Connection ID and Target Headers</STRONG>
 * According to the IrOBEX specification, a packet may not contain a Connection
 * ID and Target header.  Since the Connection ID header is managed by the
 * implementation, it will not send a Connection ID header, if a Connection ID
 * was specified, in a packet that has a Target header.  In other words, if an
 * application adds a Target header to a <code>HeaderSet</code> object used
 * in an OBEX operation and a Connection ID was specified, no Connection ID
 * will be sent in the packet containing the Target header.
 * <STRONG>CREATE-EMPTY Requests</STRONG>
 * A CREATE-EMPTY request allows clients to create empty objects on the server.
 * When a CREATE-EMPTY request is received, the <code>onPut()</code> method
 * will be called by the implementation.  To differentiate between a normal
 * PUT request and a CREATE-EMPTY request, an application must open the
 * <code>InputStream</code> from the <code>Operation</code> object passed
 * to the <code>onPut()</code> method.  For a PUT request, the application
 * will be able to read Body data from this <code>InputStream</code>.  For
 * a CREATE-EMPTY request, there will be no Body data to read.  Therefore,
 * a call to <code>InputStream.read()</code> will return -1.
 * 
 * <DD>1.6</DD>
 * <HR>
 * 
 * 
 * <!-- ======== CONSTRUCTOR SUMMARY ======== -->
 * 
 * <A NAME="constructor_summary"><!-- --></A>
 * <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
 * <B>Constructor Summary</B></FONT></TH>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>protected </CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ServerRequestHandler.html#ServerRequestHandler()" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ServerRequestHandler.html#ServerRequestHandler()">ServerRequestHandler</A></B>()</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a ServerRequestHandler.</TD>
 * </TR>
 * </TABLE>
 * &nbsp;
 * <!-- ========== METHOD SUMMARY =========== -->
 * 
 * <A NAME="method_summary"><!-- --></A>
 * <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
 * <B>Method Summary</B></FONT></TH>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A></CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ServerRequestHandler.html#createHeaderSet()" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ServerRequestHandler.html#createHeaderSet()">createHeaderSet</A></B>()</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a <code>HeaderSet</code> object that may be used in put and get
 * operations.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;long</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ServerRequestHandler.html#getConnectionID()" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ServerRequestHandler.html#getConnectionID()">getConnectionID</A></B>()</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Retrieves the connection ID that is being used in the present connection.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;void</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ServerRequestHandler.html#onAuthenticationFailure(byte[])" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ServerRequestHandler.html#onAuthenticationFailure(byte[])">onAuthenticationFailure</A></B>(byte[]&nbsp;userName)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Called when this object attempts to authenticate a client and the
 * authentication request fails because the response digest in the
 * authentication response header was wrong.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ServerRequestHandler.html#onConnect(javax.obex.HeaderSet, javax.obex.HeaderSet)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ServerRequestHandler.html#onConnect(javax.obex.HeaderSet, javax.obex.HeaderSet)">onConnect</A></B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;request,
 * <A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;reply)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Called when a CONNECT request is received.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ServerRequestHandler.html#onDelete(javax.obex.HeaderSet, javax.obex.HeaderSet)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ServerRequestHandler.html#onDelete(javax.obex.HeaderSet, javax.obex.HeaderSet)">onDelete</A></B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;request,
 * <A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;reply)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Called when a DELETE request is received.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;void</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ServerRequestHandler.html#onDisconnect(javax.obex.HeaderSet, javax.obex.HeaderSet)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ServerRequestHandler.html#onDisconnect(javax.obex.HeaderSet, javax.obex.HeaderSet)">onDisconnect</A></B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;request,
 * <A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;reply)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Called when a DISCONNECT request is received.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ServerRequestHandler.html#onGet(javax.obex.Operation)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ServerRequestHandler.html#onGet(javax.obex.Operation)">onGet</A></B>(<A HREF="Operation.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/Operation.html" title="interface in javax.obex">Operation</A>&nbsp;op)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Called when a GET request is received.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ServerRequestHandler.html#onPut(javax.obex.Operation)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ServerRequestHandler.html#onPut(javax.obex.Operation)">onPut</A></B>(<A HREF="Operation.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/Operation.html" title="interface in javax.obex">Operation</A>&nbsp;op)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Called when a PUT request is received.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;int</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ServerRequestHandler.html#onSetPath(javax.obex.HeaderSet, javax.obex.HeaderSet, boolean, boolean)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ServerRequestHandler.html#onSetPath(javax.obex.HeaderSet, javax.obex.HeaderSet, boolean, boolean)">onSetPath</A></B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;request,
 * <A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;reply,
 * boolean&nbsp;backup,
 * boolean&nbsp;create)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Called when a SETPATH request is received.</TD>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
 * <CODE>&nbsp;void</CODE></FONT></TD>
 * <TD><CODE><B><A HREF="ServerRequestHandler.html#setConnectionID(long)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ServerRequestHandler.html#setConnectionID(long)">setConnectionID</A></B>(long&nbsp;id)</CODE>
 * 
 * <BR>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the connection ID header to include in the reply packets.</TD>
 * </TR>
 * </TABLE>
 * &nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
 * <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 * <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
 * <TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
 * </TR>
 * <TR BGCOLOR="white" CLASS="TableRowColor">
 * <TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
 * </TR>
 * </TABLE>
 * &nbsp;
 * 
 * <!-- ========= CONSTRUCTOR DETAIL ======== -->
 * 
 * <A NAME="constructor_detail"><!-- --></A>
 * <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
 * <B>Constructor Detail</B></FONT></TH>
 * </TR>
 * </TABLE>
 * 
 * <A NAME="ServerRequestHandler()"><!-- --></A><H3>
 * ServerRequestHandler</H3>
 * <PRE>
 * protected <B>ServerRequestHandler</B>()</PRE>
 * <DD>Creates a ServerRequestHandler.
 * 
 * <!-- ============ METHOD DETAIL ========== -->
 * 
 * <A NAME="method_detail"><!-- --></A>
 * <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
 * <B>Method Detail</B></FONT></TH>
 * </TR>
 * </TABLE>
 * 
 * <A NAME="createHeaderSet()"><!-- --></A><H3>
 * createHeaderSet</H3>
 * <PRE>
 * public final <A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A> <B>createHeaderSet</B>()</PRE>
 * <DD>Creates a <code>HeaderSet</code> object that may be used in put and get
 * operations.
 * 
 * operations</DL>
 * <HR>
 * 
 * <A NAME="setConnectionID(long)"><!-- --></A><H3>
 * setConnectionID</H3>
 * <PRE>
 * public void <B>setConnectionID</B>(long&nbsp;id)</PRE>
 * <DD>Sets the connection ID header to include in the reply packets.
 * sent
 * <DD><CODE>java.lang.IllegalArgumentException</CODE> - if <code>id</code> is not in the
 * range -1 to 2<sup>32</sup>-1<DT><B>See Also:</B><DD><A HREF="ServerRequestHandler.html#getConnectionID()" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ServerRequestHandler.html#getConnectionID()"><CODE>getConnectionID()</CODE></A></DL>
 * <HR>
 * 
 * <A NAME="getConnectionID()"><!-- --></A><H3>
 * getConnectionID</H3>
 * <PRE>
 * public long <B>getConnectionID</B>()</PRE>
 * <DD>Retrieves the connection ID that is being used in the present connection.
 * This method will return -1 if no connection ID is being used.
 * 
 * used<DT><B>See Also:</B><DD><A HREF="ServerRequestHandler.html#setConnectionID(long)" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ServerRequestHandler.html#setConnectionID(long)"><CODE>setConnectionID(long)</CODE></A></DL>
 * <HR>
 * 
 * <A NAME="onConnect(javax.obex.HeaderSet, javax.obex.HeaderSet)"><!-- --></A><H3>
 * onConnect</H3>
 * <PRE>
 * public int <B>onConnect</B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;request,
 * <A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;reply)</PRE>
 * <DD>Called when a CONNECT request is received.
 * If this method is not implemented by the class that extends this
 * class, <code>onConnect()</code> will always return an
 * <code>OBEX_HTTP_OK</code> response code.
 * The headers received in the request can be retrieved from the
 * <code>request</code> argument.  The headers that should be sent
 * in the reply must be specified in the <code>reply</code> argument.
 * <code>request</code> will never be <code>null</code><DD><CODE>reply</CODE> - the headers that should be sent in the reply;
 * <code>reply</code> will never be <code>null</code>
 * be      * returned to the client; if an invalid response code is
 * provided, the <code>OBEX_HTTP_INTERNAL_ERROR</code> response code will
 * be used</DL>
 * <HR>
 * 
 * <A NAME="onDisconnect(javax.obex.HeaderSet, javax.obex.HeaderSet)"><!-- --></A><H3>
 * onDisconnect</H3>
 * <PRE>
 * public void <B>onDisconnect</B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;request,
 * <A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;reply)</PRE>
 * <DD>Called when a DISCONNECT request is received.
 * The headers received in the request can be retrieved from the
 * <code>request</code> argument.  The headers that should be sent
 * in the reply must be specified in the <code>reply</code> argument.
 * <code>request</code> will never be <code>null</code><DD><CODE>reply</CODE> - the headers that should be sent in the reply;
 * <code>reply</code> will never be <code>null</code></DL>
 * <HR>
 * 
 * <A NAME="onSetPath(javax.obex.HeaderSet, javax.obex.HeaderSet, boolean, boolean)"><!-- --></A><H3>
 * onSetPath</H3>
 * <PRE>
 * public int <B>onSetPath</B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;request,
 * <A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;reply,
 * boolean&nbsp;backup,
 * boolean&nbsp;create)</PRE>
 * <DD>Called when a SETPATH request is received.
 * If this method is not implemented by the class that extends this
 * class, <code>onSetPath()</code> will always return an
 * <code>OBEX_HTTP_NOT_IMPLEMENTED</code> response code.
 * The headers received in the request can be retrieved from the
 * <code>request</code> argument.  The headers that should be sent
 * in the reply must be specified in the <code>reply</code> argument.
 * <code>request</code> will never be <code>null</code><DD><CODE>reply</CODE> - the headers that should be sent in the reply;
 * <code>reply</code> will never be <code>null</code><DD><CODE>backup</CODE> - <code>true</code> if the client requests that the server
 * back up one directory before changing to the path described by
 * <code>name</code>; <code>false</code> to apply the request to the present
 * path<DD><CODE>create</CODE> - <code>true</code> if the path should be created if it does
 * not already exist; <code>false</code> if the path should not be created
 * if it does not exist and an error code should be returned
 * be returned to the client; if an invalid response code is provided, the
 * <code>OBEX_HTTP_INTERNAL_ERROR</code> response code will be used</DL>
 * <HR>
 * 
 * <A NAME="onDelete(javax.obex.HeaderSet, javax.obex.HeaderSet)"><!-- --></A><H3>
 * onDelete</H3>
 * <PRE>
 * public int <B>onDelete</B>(<A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;request,
 * <A HREF="HeaderSet.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/HeaderSet.html" title="interface in javax.obex">HeaderSet</A>&nbsp;reply)</PRE>
 * <DD>Called when a DELETE request is received.
 * If this method is not implemented by the class that extends this
 * class, <code>onDelete()</code> will always return an
 * <code>OBEX_HTTP_NOT_IMPLEMENTED</code> response code.
 * The headers received in the request can be retrieved from the
 * <code>request</code> argument.  The headers that should be sent
 * in the reply must be specified in the <code>reply</code> argument.
 * <code>request</code> will never be <code>null</code><DD><CODE>reply</CODE> - the headers that should be sent in the reply;
 * <code>reply</code> will never be <code>null</code>
 * be returned to the client; if an invalid response code is provided, the
 * <code>OBEX_HTTP_INTERNAL_ERROR</code> response code will be used</DL>
 * <HR>
 * 
 * <A NAME="onPut(javax.obex.Operation)"><!-- --></A><H3>
 * onPut</H3>
 * <PRE>
 * public int <B>onPut</B>(<A HREF="Operation.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/Operation.html" title="interface in javax.obex">Operation</A>&nbsp;op)</PRE>
 * <DD>Called when a PUT request is received.
 * If this method is not implemented by the class that extends this
 * class, <code>onPut()</code> will always return an
 * <code>OBEX_HTTP_NOT_IMPLEMENTED</code> response code.
 * If an ABORT request is received during the processing of a PUT request,
 * <code>op</code> will be closed by the implementation.
 * headers to be sent in the reply; <code>op</code> will never be
 * <code>null</code>
 * be returned to the client; if an invalid response code is provided, the
 * <code>OBEX_HTTP_INTERNAL_ERROR</code> response code will be used</DL>
 * <HR>
 * 
 * <A NAME="onGet(javax.obex.Operation)"><!-- --></A><H3>
 * onGet</H3>
 * <PRE>
 * public int <B>onGet</B>(<A HREF="Operation.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/Operation.html" title="interface in javax.obex">Operation</A>&nbsp;op)</PRE>
 * <DD>Called when a GET request is received.
 * If this method is not implemented by the class that extends this
 * class, <code>onGet()</code> will always return an
 * <code>OBEX_HTTP_NOT_IMPLEMENTED</code> response code.
 * If an ABORT request is received during the processing of a GET request,
 * <code>op</code> will be closed by the implementation.
 * headers to be sent in the reply; <code>op</code> will never be
 * <code>null</code>
 * be returned to the client; if an invalid response code is provided, the
 * <code>OBEX_HTTP_INTERNAL_ERROR</code> response code will be used</DL>
 * <HR>
 * 
 * <A NAME="onAuthenticationFailure(byte[])"><!-- --></A><H3>
 * onAuthenticationFailure</H3>
 * <PRE>
 * public void <B>onAuthenticationFailure</B>(byte[]&nbsp;userName)</PRE>
 * <DD>Called when this object attempts to authenticate a client and the
 * authentication request fails because the response digest in the
 * authentication response header was wrong.
 * If this method is not implemented by the class that extends this class,
 * this method will do nothing.
 * <code>null</code> if no user name was provided in the response</DL>
 * <!-- ========= END OF CLASS DATA ========= -->
 * <HR>
 * 
 * 
 * <!-- ======= START OF BOTTOM NAVBAR ====== -->
 * <A NAME="navbar_bottom"><!-- --></A>
 * <A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
 * <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
 * <TR>
 * <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
 * <A NAME="navbar_bottom_firstrow"><!-- --></A>
 * <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
 * <TR ALIGN="center" VALIGN="top">
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../overview-summary.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
 * <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../deprecated-list.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../index-all.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
 * <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../help-doc.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
 * </TR>
 * </TABLE>
 * </TD>
 * <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
 * <b>JSR 82</b></EM>
 * </TD>
 * </TR>
 * 
 * <TR>
 * <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
 * &nbsp;<A HREF="ResponseCodes.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ResponseCodes.html" title="class in javax.obex"><B>PREV CLASS</B></A>&nbsp;
 * &nbsp;<A HREF="SessionNotifier.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/SessionNotifier.html" title="interface in javax.obex"><B>NEXT CLASS</B></A></FONT></TD>
 * <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
 * <A HREF="../../index.html-javax-obex-ServerRequestHandler.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/index.html?javax/obex/ServerRequestHandler.html" target="_top"><B>FRAMES</B></A>  &nbsp;
 * &nbsp;<A HREF="ServerRequestHandler.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/javax/obex/ServerRequestHandler.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
 * &nbsp;<SCRIPT type="text/javascript">
 * <!--
 * if(window==top) {
 * document.writeln('<A HREF="../../allclasses-noframe.html"tpa=http://java.sun.com/javame/reference/apis/jsr082/allclasses-noframe.html><B>All Classes</B></A>');
 * }
 * //-->
 * </SCRIPT>
 * <NOSCRIPT>
 * <A HREF="../../allclasses-noframe.html" tppabs="http://java.sun.com/javame/reference/apis/jsr082/allclasses-noframe.html"><B>All Classes</B></A>
 * </NOSCRIPT>
 * 
 * 
 * </FONT></TD>
 * </TR>
 * <TR>
 * <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
 * SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
 * <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
 * DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
 * </TR>
 * </TABLE>
 * <A NAME="skip-navbar_bottom"></A>
 * <!-- ======== END OF BOTTOM NAVBAR ======= -->
 * 
 * <HR>
 * <small>Copyright (c) 2006 Sun Microsystems, Inc. All rights reserved. <b>Use is subject to <a href="http://java.sun.com/javame/reference/apis/license.html" target="_top">License Terms</a>.</b> Your use of this web site or any of its content or software indicates your agreement to be bound by these License Terms.<br><br>For more information, please consult the <a href="http://jcp.org/en/jsr/detail?id=82" target="_top">JSR 82 specification.</a></small>
 * </BODY>
 * <script language="JavaScript" src="../../../../../../js/omi/jsc/s_code_remote.js" tppabs="http://java.sun.com/js/omi/jsc/s_code_remote.js"></script></HTML>
 * 
 */
public class ServerRequestHandler extends java.lang.Object
{
	//following variables are implicitely defined by getter- or setter-methods:
	private long connectionID;

	/**
	 * Creates a ServerRequestHandler.
	 * <P>
	 * 
	 * 
	 */
	protected ServerRequestHandler()
	{
		//TODO implement ServerRequestHandler
	}

	/**
	 * Creates a <code>HeaderSet</code> object that may be used in put and get
	 * operations.
	 * <P>
	 * 
	 * 
	 * @return the HeaderSet object to use in put and get operations
	 */
	public final HeaderSet createHeaderSet()
	{
		return null;
		//TODO implement createHeaderSet
	}

	/**
	 * Sets the connection ID header to include in the reply packets.
	 * <P>
	 * 
	 * @param id - the connection ID to use; -1 if no connection ID should be sent
	 * @throws java.lang.IllegalArgumentException - if id is not in the range -1 to 2 32-1
	 * @see #getConnectionID()
	 */
	public void setConnectionID(long id)
	{
		this.connectionID = id;
	}

	/**
	 * Retrieves the connection ID that is being used in the present connection.
	 * This method will return -1 if no connection ID is being used.
	 * <P>
	 * 
	 * 
	 * @return the connection id being used or -1 if no connection ID is being used
	 * @see #setConnectionID(long)
	 */
	public long getConnectionID()
	{
		return this.connectionID;
	}

	/**
	 * Called when a CONNECT request is received.
	 * <P>
	 * If this method is not implemented by the class that extends this
	 * class, <code>onConnect()</code> will always return an
	 * <code>OBEX_HTTP_OK</code> response code.
	 * <P>
	 * The headers received in the request can be retrieved from the
	 * <code>request</code> argument.  The headers that should be sent
	 * in the reply must be specified in the <code>reply</code> argument.
	 * <P>
	 * 
	 * @param request - contains the headers sent by the client; request will never be null
	 * @param reply - the headers that should be sent in the reply; reply will never be null
	 * @return a response code defined in ResponseCodes that will be      * returned to the client; if an invalid response code is provided, the OBEX_HTTP_INTERNAL_ERROR response code will be used
	 */
	public int onConnect( HeaderSet request, HeaderSet reply)
	{
		return 0;
		//TODO implement onConnect
	}

	/**
	 * Called when a DISCONNECT request is received.
	 * <P>
	 * The headers received in the request can be retrieved from the
	 * <code>request</code> argument.  The headers that should be sent
	 * in the reply must be specified in the <code>reply</code> argument.
	 * <P>
	 * 
	 * @param request - contains the headers sent by the client; request will never be null
	 * @param reply - the headers that should be sent in the reply; reply will never be null
	 */
	public void onDisconnect( HeaderSet request, HeaderSet reply)
	{
		//TODO implement onDisconnect
	}

	/**
	 * Called when a SETPATH request is received.
	 * <P>
	 * If this method is not implemented by the class that extends this
	 * class, <code>onSetPath()</code> will always return an
	 * <code>OBEX_HTTP_NOT_IMPLEMENTED</code> response code.
	 * <P>
	 * The headers received in the request can be retrieved from the
	 * <code>request</code> argument.  The headers that should be sent
	 * in the reply must be specified in the <code>reply</code> argument.
	 * <P>
	 * 
	 * @param request - contains the headers sent by the client; request will never be null
	 * @param reply - the headers that should be sent in the reply; reply will never be null
	 * @param backup - true if the client requests that the server back up one directory before changing to the path described by name; false to apply the request to the present path
	 * @param create - true if the path should be created if it does not already exist; false if the path should not be created if it does not exist and an error code should be returned
	 * @return a response code defined in ResponseCodes that will be returned to the client; if an invalid response code is provided, the OBEX_HTTP_INTERNAL_ERROR response code will be used
	 */
	public int onSetPath( HeaderSet request, HeaderSet reply, boolean backup, boolean create)
	{
		return 0;
		//TODO implement onSetPath
	}

	/**
	 * Called when a DELETE request is received.
	 * <P>
	 * If this method is not implemented by the class that extends this
	 * class, <code>onDelete()</code> will always return an
	 * <code>OBEX_HTTP_NOT_IMPLEMENTED</code> response code.
	 * <P>
	 * The headers received in the request can be retrieved from the
	 * <code>request</code> argument.  The headers that should be sent
	 * in the reply must be specified in the <code>reply</code> argument.
	 * <P>
	 * 
	 * @param request - contains the headers sent by the client; request will never be null
	 * @param reply - the headers that should be sent in the reply; reply will never be null
	 * @return a response code defined in ResponseCodes that will be returned to the client; if an invalid response code is provided, the OBEX_HTTP_INTERNAL_ERROR response code will be used
	 */
	public int onDelete( HeaderSet request, HeaderSet reply)
	{
		return 0;
		//TODO implement onDelete
	}

	/**
	 * Called when a PUT request is received.
	 * <P>
	 * If this method is not implemented by the class that extends this
	 * class, <code>onPut()</code> will always return an
	 * <code>OBEX_HTTP_NOT_IMPLEMENTED</code> response code.
	 * <P>
	 * If an ABORT request is received during the processing of a PUT request,
	 * <code>op</code> will be closed by the implementation.
	 * <P>
	 * 
	 * @param op - contains the headers sent by the client and allows new headers to be sent in the reply; op will never be null
	 * @return a response code defined in ResponseCodes that will be returned to the client; if an invalid response code is provided, the OBEX_HTTP_INTERNAL_ERROR response code will be used
	 */
	public int onPut( Operation op)
	{
		return 0;
		//TODO implement onPut
	}

	/**
	 * Called when a GET request is received.
	 * <P>
	 * If this method is not implemented by the class that extends this
	 * class, <code>onGet()</code> will always return an
	 * <code>OBEX_HTTP_NOT_IMPLEMENTED</code> response code.
	 * <P>
	 * If an ABORT request is received during the processing of a GET request,
	 * <code>op</code> will be closed by the implementation.
	 * <P>
	 * 
	 * @param op - contains the headers sent by the client and allows new headers to be sent in the reply; op will never be null
	 * @return a response code defined in ResponseCodes that will be returned to the client; if an invalid response code is provided, the OBEX_HTTP_INTERNAL_ERROR response code will be used
	 */
	public int onGet( Operation op)
	{
		return 0;
		//TODO implement onGet
	}

	/**
	 * Called when this object attempts to authenticate a client and the
	 * authentication request fails because the response digest in the
	 * authentication response header was wrong.
	 * <P>
	 * If this method is not implemented by the class that extends this class,
	 * this method will do nothing.
	 * <P>
	 * 
	 * @param userName - the user name returned in the authentication response; null if no user name was provided in the response
	 */
	public void onAuthenticationFailure(byte[] userName)
	{
		//TODO implement onAuthenticationFailure
	}

}
