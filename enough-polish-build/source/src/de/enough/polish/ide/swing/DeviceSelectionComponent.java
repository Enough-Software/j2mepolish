/*
 * Created on 26-Jan-2006 at 00:30:41.
 * 
 * Copyright (c) 2005 Robert Virkus / Enough Software
 *
 * This file is part of J2ME Polish.
 *
 * J2ME Polish is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * J2ME Polish is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with J2ME Polish; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 * Commercial licenses are also available, please
 * refer to the accompanying LICENSE.txt or visit
 * http://www.j2mepolish.org for details.
 */
package de.enough.polish.ide.swing;

import java.awt.Component;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;

import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.ListCellRenderer;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;

import de.enough.polish.Device;
import de.enough.polish.Environment;
import de.enough.polish.devices.Configuration;
import de.enough.polish.devices.DeviceDatabase;
import de.enough.polish.devices.DeviceTree;
import de.enough.polish.devices.DeviceTreeItem;
import de.enough.polish.devices.Library;
import de.enough.polish.devices.Platform;
import de.enough.polish.devices.PolishComponent;

/**
 * <p>Can be used for an easy selection of target devices.</p>
 *
 * <p>Copyright Enough Software 2005</p>
 * <pre>
 * history
 *        26-Jan-2006 - rob creation
 * </pre>
 * @author Robert Virkus, j2mepolish@enough.de
 */
public class DeviceSelectionComponent 
extends JPanel 
implements DocumentListener, PolishComponentSelectionListener, DeviceSelector 
{
	
	private static final long serialVersionUID = 3962911176522710954L;
	private DeviceDatabase database;
	private DeviceTree deviceTree;
	private PolishComponentCheckBoxList configurationsList;
	private PolishComponentCheckBoxList platformsList;
	private DeviceTreeView deviceTreeView;
	private PolishComponentCheckBoxList librariesList;
	private Environment environment;
	
	
	// ui variables:
    private JLabel configurationsLabel;
    private JTextArea description;
    private JLabel descriptionLabel;
    private JLabel devicesLabel;
    private JScrollPane configurationsScrollPane;
    private JScrollPane platformsScrollPane;
    private JScrollPane devicesListScrollPane;
    private JScrollPane descriptionScrollPane;
    private JLabel platformsLabel;
	private JScrollPane librariesScrollPane;
	private JLabel librariesLabel;


	 /**
	  * Creates a new device selector.
	  *  
	  * @param polishHomePath the path to the J2ME Polish installation folder. 
	  *  
	  */
    public DeviceSelectionComponent( String polishHomePath ) {
    	init( polishHomePath );
        initComponents();
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {
        this.configurationsScrollPane = new JScrollPane();
        this.configurationsList = getConfigurationsCheckBoxList();
        this.configurationsLabel = new JLabel();
        this.platformsScrollPane = new JScrollPane();
        this.platformsList = getPlatformsCheckBoxList();
        this.platformsLabel = new JLabel();
        this.librariesScrollPane = new JScrollPane();
        this.librariesList = getLibrariesCheckBoxList();
        this.librariesLabel = new JLabel();
        this.devicesListScrollPane = new JScrollPane();
        this.deviceTreeView = getDeviceTreeView();
        this.devicesLabel = new JLabel();
        this.descriptionLabel = new JLabel();
        this.descriptionScrollPane = new JScrollPane();
        this.description = new JTextArea();

//        configurationsList.setModel( getConfigurationsModel() );
//        configurationsList.addListSelectionListener( getConfigurationsModel() );
//        CheckBoxCellRenderer checkBoxCellRenderer = new CheckBoxCellRenderer();
//        configurationsList.setCellRenderer( checkBoxCellRenderer );
        this.configurationsScrollPane.setViewportView( this.configurationsList );
        this.configurationsLabel.setText( "Configuration:" );
        //org.openide.awt.Mnemonics.setLocalizedText(configurationsLabel, "Configuration:");

        this.platformsScrollPane.setViewportView(this.platformsList);
        this.platformsLabel.setText( "Profiles/Platforms:" );
        //org.openide.awt.Mnemonics.setLocalizedText(platformsLabel, "Profiles/Platforms:");
        
        this.librariesScrollPane.setViewportView(this.librariesList);
        this.librariesLabel.setText( "Libraries:" );

        this.devicesListScrollPane.setViewportView(this.deviceTreeView);

        this.devicesLabel.setText( "Devices:" );
        //org.openide.awt.Mnemonics.setLocalizedText(devicesLabel, "Devices:");

        this.descriptionLabel.setText( "Description:" );
        //org.openide.awt.Mnemonics.setLocalizedText(descriptionLabel, "Description:");

        this.description.setBackground(new java.awt.Color(238, 238, 238));
        this.description.setColumns(20);
        this.description.setEditable(false);
        this.description.setLineWrap(true);
        this.description.setRows(2);
        this.description.setToolTipText("Description of the currently selected device");
        this.description.setWrapStyleWord(true);
        this.descriptionScrollPane.setViewportView(this.description);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, this.descriptionScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(this.devicesListScrollPane)
                        .add(layout.createSequentialGroup()
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(this.configurationsLabel)
                                .add(this.configurationsScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 219, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(23, 23, 23)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(this.platformsLabel)
                                .add(this.platformsScrollPane,      org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 219, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(23, 23, 23)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(this.librariesLabel)
                                .add(this.librariesScrollPane,      org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 219, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                )
                        .add(this.devicesLabel)
                        .add(this.descriptionLabel)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(this.configurationsLabel)
                    .add(this.platformsLabel)
                    .add(this.librariesLabel))
                .add(4, 4, 4)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                	.add(this.librariesScrollPane,      org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(this.platformsScrollPane,      org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(this.configurationsScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    )
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(this.devicesLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(this.devicesListScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(this.descriptionLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(this.descriptionScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 51, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>
        


	private DeviceTreeView createDeviceTreeView() {
		DeviceTreeView view = new DeviceTreeView( this.deviceTree );
		view.addTreeSelectionListener( new TreeSelectionListenerImpl()  );
		return view;
	}
    

	private DeviceTreeView getDeviceTreeView() {
		if (this.deviceTreeView == null) {
			this.deviceTreeView = createDeviceTreeView();
		}
		return this.deviceTreeView;
	}



    
    public void init( String polishHomePath ) {
    	if (polishHomePath == null) {
    		throw new IllegalArgumentException("The installation directory of J2ME Polish has to be given.");
    	}
    	File polishHome = new File( polishHomePath );
    	this.database = new DeviceDatabase( polishHome );
    	this.deviceTree = new DeviceTree( this.database, null, null );
    	
    	this.environment = new Environment();
    	this.environment.set("polish.home", polishHome );
    	this.environment.addVariable("polish.home", polishHome.getAbsolutePath() );
    	this.environment.set("polish.apidir", new File( polishHome, "import") );
    	
    }
    
    public void insertUpdate(DocumentEvent e) {
    }

    public void removeUpdate(DocumentEvent e) {
    }

    public void changedUpdate(DocumentEvent e) {
    }
    
    private PolishComponentCheckBoxList getLibrariesCheckBoxList() {
    	if (this.librariesList == null) {	
    		Library[] libraries = this.database.getLibraries();
    		ArrayList libsList = new ArrayList( (libraries.length * 3) / 2);
    		for (int i = 0; i < libraries.length; i++) {
				Library library = libraries[i];
				libsList.add(library);
				String[] names = library.getNames();
				for (int j = 0; j < names.length; j++) {
					String name = names[j];
					if (name.startsWith("JSR-")) {
						libsList.add( new Library( name + ": " + library.getFullName(), library) );
						break;
					}
				}
			}
    		libraries = (Library[]) libsList.toArray( new Library[ libsList.size() ]);
    		Arrays.sort( libraries );
    		this.librariesList = new PolishComponentCheckBoxList( libraries, false );
    		this.librariesList.setSelectionListener( this );
    	}
        return this.librariesList;
	}

    private PolishComponentCheckBoxList getConfigurationsCheckBoxList() {    	
    	if (this.configurationsList == null) {
    		this.configurationsList = new PolishComponentCheckBoxList( this.database.getConfigurations() );
    		this.configurationsList.setSelectionListener( this );
    	}
        return this.configurationsList;
    }

    private PolishComponentCheckBoxList getPlatformsCheckBoxList() {    	
    	if (this.platformsList == null) {
    		this.platformsList = new PolishComponentCheckBoxList( this.database.getPlatforms() );
    		this.platformsList.setSelectionListener( this );
    	}
        return this.platformsList;
    }

    static class CheckBoxCellRenderer implements ListCellRenderer {

		public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
			JCheckBox box = (JCheckBox) value; 
			if (isSelected) {
				box.setBackground(list.getSelectionBackground());
				box.setForeground(list.getSelectionForeground());
			} else {
				box.setBackground(list.getBackground());
	        	box.setForeground(list.getForeground());
	        }
			return box;
		}
    	
    }

    /* (non-Javadoc)
	 * @see de.enough.polish.ide.swing.DeviceSelector#getSelectedDeviceIdentifiers()
	 */
    public String[] getSelectedDeviceIdentifiers(){
    	return this.deviceTree.getSelectedDeviceIdentifiers();
    }

    /* (non-Javadoc)
	 * @see de.enough.polish.ide.swing.DeviceSelector#getSelectedDeviceProperties()
	 */
    public Map getSelectedDeviceProperties(){
    	return this.deviceTree.getSelectedDeviceProperties();
    }
    
	public Map getDeviceProperties(String identifier) {
		Device device = this.database.getDevice(identifier);
		device.setEnvironment( this.environment );
		Map capabilities = device.getCapabilities();
		capabilities.putAll( device.getFeatures() );		
		capabilities.put( "polish.BootClassPath", device.getBootClassPath() );
		capabilities.put( "polish.ClassPath", device.getClassPath() );
		capabilities.put( "polish.SupportedApis", device.getSupportedApis() );
		return capabilities;
	}
 

    /* (non-Javadoc)
	 * @see de.enough.polish.ide.swing.DeviceSelector#getSelectedDeviceClassPaths()
	 */
    public String[] getSelectedDeviceClassPaths(){
    	return this.deviceTree.getSelectedDeviceClassPaths();
    }

    
    public static void main(String[] args) {
    	if (args.length == 0) {
    		System.out.println("Usage: java de.enough.polish.ide.swing.DeviceSelectionComponent polish.home");
    		return;
    	}
		DeviceSelectionComponent c = new DeviceSelectionComponent(args[0]);
		
		JFrame frame = new JFrame("Hello World");
		frame.getContentPane().add(c);
		frame.pack();
		frame.setVisible(true);
	}


	public void notifySelection( PolishComponentSelectionEvent event) {
		Object source = event.getSource();
		PolishComponent[] entries = event.getEntries();
		if (source == this.configurationsList) {
			this.deviceTree.rebuild( getConfigurations( entries ), getPlatforms(), getLibraries() );
		} else if (source == this.platformsList) {
			this.deviceTree.rebuild( getConfigurations(), getPlatforms( entries ), getLibraries() );
		} else if (source == this.librariesList) {
			this.deviceTree.rebuild( getConfigurations(), getPlatforms(), getLibraries( entries ) );
		}
		this.deviceTreeView = createDeviceTreeView();
		this.devicesListScrollPane.setViewportView( this.deviceTreeView );
		Object changedComponent = event.getChangedComponent();
		if (changedComponent instanceof PolishComponentCheckBox) {
			setDescription(  ((PolishComponentCheckBox) changedComponent).getDescription() );
		}
		firePropertyChange("polish.devices.update", 1, 10);
	}
	
	public void setDescription(String text ) {
		this.description.setText( text );
	}


	private Configuration[] getConfigurations() {
		return getConfigurations( this.configurationsList.getSelectedComponents() );
	}

	private Configuration[] getConfigurations(PolishComponent[] entries) {
		if (entries == null) {
			return null;
		}
		Configuration[] configurations = new Configuration[ entries.length ];
		System.arraycopy( entries, 0, configurations, 0, entries.length );
		return configurations;
	}

	private Platform[] getPlatforms() {
		return getPlatforms( this.platformsList.getSelectedComponents() );
	}

	private Platform[] getPlatforms(PolishComponent[] entries) {
		if (entries == null) {
			return null;
		}
		Platform[] platforms = new Platform[ entries.length ];
		System.arraycopy( entries, 0, platforms, 0, entries.length );
		return platforms;
	}
	
	private Library[] getLibraries() {
		return getLibraries( this.librariesList.getSelectedComponents() );
	}
	private Library[] getLibraries(PolishComponent[] entries) {
		if (entries == null) {
			return null;
		}
		Library[] libraries = new Library[ entries.length ];
		System.arraycopy( entries, 0, libraries, 0, entries.length );
		return libraries;
	}

	
	class TreeSelectionListenerImpl implements TreeSelectionListener {

		public void valueChanged(TreeSelectionEvent e) {
			Object source = e.getSource();
			if ( source instanceof DeviceTreeCheckBox ) {
				DeviceTreeItem item = ((DeviceTreeCheckBox)source).getDeviceTreeItem();
				DeviceSelectionComponent.this.setDescription( item.getDescription() );
			}
		}
		
	}

   
}